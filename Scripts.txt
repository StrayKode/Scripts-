using UnityEngine;
using System.Collections.Generic;
using System.Collections;

public class AudioManager : MonoBehaviour
{
    [Header("Audio Sources")]
    public AudioSource sfxSource;    // Para sonidos SFX normales
    public AudioSource musicSource;  // Para música y transiciones

    public AudioClip playerShoot;
    public AudioClip run1;
    public AudioClip run2;
    public AudioClip hurt;
    public AudioClip jumpSound1;
    public AudioClip jumpSound2;
    public AudioClip die;
    public AudioClip gruntShoot;
    public AudioClip mageShoot;
    public AudioClip laser;
    public AudioClip bomb;
    public AudioClip bossScreem;
    public AudioClip click;
    public float runDelay;
    public bool runSound;
    public bool runSoundEnd;
    [SerializeField] private PauseMenu pauseMenu;

    private Dictionary<string, AudioClip> sounds;

    [Header("Pitch Settings")]
    [Range(-1f, 3f)] public float basePitch = 1f;
    public float pitchVariation = 0.3f;

    private Coroutine crossfadeCoroutine; // Para prevenir solapamientos de crossfade

    private void Awake()
    {
        // Buscar automáticamente el sfxSource si no está asignado
        if (sfxSource == null)
        {
            sfxSource = GetComponent<AudioSource>();
            if (sfxSource == null)
            {
                Debug.LogError("[AudioManager] No se encontró SFX AudioSource en el objeto '" + gameObject.name + "'.");
            }
        }

        // Buscar automáticamente el musicSource en la MainCamera si no está asignado
        if (musicSource == null)
        {
            GameObject cam = GameObject.FindGameObjectWithTag("MainCamera");
            if (cam != null)
            {
                musicSource = cam.GetComponent<AudioSource>();
                if (musicSource == null)
                {
                    Debug.LogError("[AudioManager] No se encontró Music AudioSource en el objeto MainCamera.");
                }
            }
            else
            {
                Debug.LogError("[AudioManager] No se encontró ningún objeto con tag 'MainCamera' para el Music AudioSource.");
            }
        }

        // Setear el volumen de la música SIEMPRE a 0.8 al iniciar
        if (musicSource != null)
            musicSource.volume = 0.8f;

        sounds = new Dictionary<string, AudioClip>()
        {
            { "PlayerShoot", playerShoot },
            { "Run1", run1 },
            { "Run2", run2 },
            { "Hurt", hurt },
            { "Jump1", jumpSound1 },
            { "Jump2", jumpSound2 },
            { "Die", die },
            { "GruntShoot", gruntShoot },
            { "MageShoot", mageShoot },
            { "Laser", laser },
            { "Bomb", bomb },
            { "BossScreem", bossScreem },
            { "ClickSound", click },
        };
    }

    private void Start()
    {
        pauseMenu = FindObjectOfType<PauseMenu>();
        if (musicSource != null)
            musicSource.volume = 0.8f;
    }

    private void Update()
    {
        // El volumen SIEMPRE debe ser 0.8 (no tocar sfxSource)
        if (musicSource != null && musicSource.volume != 0.8f)
            musicSource.volume = 0.8f;
    }

    public void PlaySound(string soundName, float volume = 1f)
    {
        if (pauseMenu.pauseMenu == false && sfxSource != null)
        {
            SelectRandomPitch();
            sfxSource.PlayOneShot(sounds[soundName], Mathf.Clamp01(volume));
            sfxSource.pitch = basePitch;
        }
    }

    public IEnumerator RunEfect()
    {
        if (sfxSource == null) yield break;
        Debug.Log("Run Sound");
        SelectRandomPitch();
        sfxSource.PlayOneShot(run1, Mathf.Clamp01(0.2f));
        sfxSource.pitch = basePitch;
        yield return new WaitForSeconds(runDelay);
        SelectRandomPitch();
        sfxSource.PlayOneShot(run2, Mathf.Clamp01(0.2f));
        sfxSource.pitch = basePitch;
    }

    private void SelectRandomPitch()
    {
        float randomPitch = basePitch + Random.Range(-pitchVariation, pitchVariation);
        if (sfxSource != null)
            sfxSource.pitch = randomPitch;
    }

    // MÉTODO para reproducir música (usa musicSource)
    public void PlayMusic(AudioClip clip)
    {
        if (musicSource == null) return;
        // No cambiar si ya está ese clip sonando
        if (musicSource.clip == clip && musicSource.isPlaying)
            return;

        musicSource.Stop();
        musicSource.clip = clip;
        musicSource.volume = 0.8f; // Siempre ponerlo a 0.8
        musicSource.Play();
    }

    // MÉTODO para crossfade entre canciones en musicSource
    public void CrossfadeMusic(AudioClip nextClip, float duration = 1.5f)
    {
        if (musicSource == null) return;
        // No hacer nada si ya está ese clip como destino o está en transición a ese mismo
        if ((musicSource.clip == nextClip && musicSource.isPlaying) || (crossfadeCoroutine != null))
            return;

        // Si ya hay una transición activa la paramos primero
        if (crossfadeCoroutine != null)
            StopCoroutine(crossfadeCoroutine);

        crossfadeCoroutine = StartCoroutine(CrossfadeMusicCoroutine(nextClip, duration));
    }

    private IEnumerator CrossfadeMusicCoroutine(AudioClip nextClip, float duration)
    {
        if (musicSource == null || musicSource.clip == nextClip)
        {
            crossfadeCoroutine = null;
            yield break;
        }

        // Crear un AudioSource temporal SOLO para el crossfade
        GameObject tempObj = new GameObject("TempMusicSource");
        tempObj.transform.parent = this.transform;
        AudioSource newSource = tempObj.AddComponent<AudioSource>();
        newSource.clip = nextClip;
        newSource.loop = true;
        newSource.volume = 0f;
        newSource.playOnAwake = false;
        newSource.outputAudioMixerGroup = musicSource.outputAudioMixerGroup;
        newSource.Play();

        float time = 0f;
        float originalVolume = musicSource.volume;
        float targetVolume = 0.8f;

        while (time < duration)
        {
            float t = time / duration;
            musicSource.volume = Mathf.Lerp(originalVolume, 0f, t);
            newSource.volume = Mathf.Lerp(0f, targetVolume, t);
            time += Time.unscaledDeltaTime;
            yield return null;
        }

        newSource.volume = targetVolume;
        musicSource.Stop();
        musicSource.clip = nextClip;
        musicSource.volume = targetVolume; // ¡Aseguramos que el volumen está a 0.8!
        musicSource.Play();

        Destroy(tempObj);
        crossfadeCoroutine = null;
    }
}using UnityEngine;

public class HeadAnimationControler : MonoBehaviour
{
    public BossHealth bossHealth;
    public GameObject Boss;
    public Animator animator;
    public GameObject Head;
    public AudioManager audioManager;
    public BossAttacksManager attackManager;

    // Banderas para rastrear si los sonidos ya fueron reproducidos
    private bool hasPlayedAngry50 = false;
    private bool hasPlayedAngry25 = false;
    private bool hasPlayedAngry15 = false;
    private bool hasPlayedAngry5 = false;

    void Start()
    {
        animator = GetComponent<Animator>();
    }

    void Update()
    {
        if (!bossHealth.isDead)
        {
            IsAngry();
        }

        if (bossHealth.isDead)
        {
            animator.SetBool("Dead", true);
            Debug.Log("Head is dead");
        }
    }

    void IsAngry()
    {
        if (attackManager.playerDetected)
        {
            if (bossHealth.currentHealth <= 50 && !hasPlayedAngry50)
            {
                animator.SetBool("Angry", true);
                Debug.Log("Boss is angry");
                audioManager.PlaySound("BossScreem", 0.3f);
                hasPlayedAngry50 = true; // Marcar como reproducido
            }
            else if (bossHealth.currentHealth <= 25 && !hasPlayedAngry25)
            {
                audioManager.PlaySound("BossScreem", 0.3f);
                hasPlayedAngry25 = true; // Marcar como reproducido
            }
            else if (bossHealth.currentHealth <= 15 && !hasPlayedAngry15)
            {
                audioManager.PlaySound("BossScreem", 0.3f);
                hasPlayedAngry15 = true; // Marcar como reproducido
            }
            else if (bossHealth.currentHealth <= 5 && !hasPlayedAngry5)
            {
                audioManager.PlaySound("BossScreem", 0.3f);
                hasPlayedAngry5 = true; // Marcar como reproducido
            }
        }
    }

    public void DestroyHead()
    {
        Destroy(Head);
    }
}using UnityEngine;
using System.Collections;

public class FadeController : MonoBehaviour
{
    public static FadeController Instance;

    [SerializeField] private CanvasGroup fadePanel;
    [SerializeField] private float fadeDuration = 0.25f;

    private Coroutine currentFadeCoroutine;

    public bool IsFading { get; private set; }

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        fadePanel.alpha = 0f;
        fadePanel.interactable = false;
        fadePanel.blocksRaycasts = false;
        IsFading = false;
    }

    public void FadeIn(System.Action onComplete = null, float? customDuration = null)
    {
        StartFade(0f, 1f, onComplete, customDuration ?? fadeDuration);
    }

    public void FadeOut(System.Action onComplete = null, float? customDuration = null)
    {
        StartFade(1f, 0f, onComplete, customDuration ?? fadeDuration);
    }

    private void StartFade(float startAlpha, float endAlpha, System.Action onComplete, float duration)
    {
        if (currentFadeCoroutine != null)
        {
            StopCoroutine(currentFadeCoroutine);
        }

        currentFadeCoroutine = StartCoroutine(FadeCoroutine(startAlpha, endAlpha, onComplete, duration));
    }

    private IEnumerator FadeCoroutine(float startAlpha, float endAlpha, System.Action onComplete, float duration)
    {
        IsFading = true;
        fadePanel.interactable = true;    // Bloquea interacción UI durante el fade
        fadePanel.blocksRaycasts = true;

        fadePanel.alpha = startAlpha;
        float timeElapsed = 0f;

        while (timeElapsed < duration)
        {
            fadePanel.alpha = Mathf.Lerp(startAlpha, endAlpha, timeElapsed / duration);
            timeElapsed += Time.unscaledDeltaTime; // Usar tiempo desacoplado para no verse afectado por Time.timeScale
            yield return null;
        }

        fadePanel.alpha = endAlpha;

        // Si el fade es a transparente, ya no bloquea la UI
        bool fadedOut = Mathf.Approximately(endAlpha, 0f);
        fadePanel.interactable = !fadedOut;
        fadePanel.blocksRaycasts = !fadedOut;

        IsFading = !fadedOut;
        currentFadeCoroutine = null;

        onComplete?.Invoke();
    }

    /// <summary>
    /// Devuelve true si no hay fade en curso y la pantalla está completamente visible.
    /// </summary>
    public bool IsFadeComplete()
    {
        return fadePanel != null && Mathf.Approximately(fadePanel.alpha, 0f) && !IsFading;
    }

    /// <summary>
    /// Devuelve true si hay un fade activo (en curso o la pantalla está tapada).
    /// Útil para bloquear input/interacción.
    /// </summary>
    public bool IsFadeBlocking()
    {
        return fadePanel != null && (IsFading || fadePanel.alpha > 0f);
    }
}using UnityEngine;
using System.Collections;
using TMPro;
using UnityEngine.SceneManagement;
using UnityEngine.Localization;

public class Dialogue : MonoBehaviour
{
    [SerializeField] private GameObject dialogueMark;
    [SerializeField] private LocalizedString[] localizedDialogueLines;
    [SerializeField] private GameObject dialoguePanel;
    [SerializeField] private TMP_Text dialogueText;
    [SerializeField] private GameObject runParticles;
    private bool isPlayerInRange;
    public bool didDialogueStart;
    private int lineIndex;
    private float typingTime = 0.05f;
    public PlayerController playerController;
    public bool BossDialogue;
    [SerializeField] private Bullet bullet;
    [SerializeField] private Animator playerAnimator;

    private Coroutine typingCoroutine;
    private string currentLineCached;

    private void Start()
    {
        string currentScene = SceneManager.GetActiveScene().name;

        if (currentScene == "Level 2" || currentScene == "Level 3")
        {
            playerController.playerHasGun = true;
            PlayerPrefs.SetInt("HasGun", 1);
            PlayerPrefs.Save();
        }
        // En Level 1 y 2: nunca puedes tener BossDialogue ni daño en 2
        if (currentScene == "Level 1" || currentScene == "Level 2")
        {
            BossDialogue = false;
            if (bullet != null)
                bullet.Damage = 1;
            PlayerPrefs.SetInt("BossDialogue", 0);
            PlayerPrefs.SetInt("BulletDamage", 1);
            PlayerPrefs.Save();
        }
    }

    void Update()
    {
        if (isPlayerInRange && Input.GetButtonDown("Fire1"))
        {
            if (!didDialogueStart)
            {
                StartDialogue();
            }
            else if (dialogueText.text == GetCurrentText())
            {
                NextDialogueLine();
            }
            else
            {
                StopAllCoroutines();
                dialogueText.text = GetCurrentText();
            }
        }

        // NUEVO: Saltar todas las líneas con Espacio si está el diálogo activo
        if (didDialogueStart && Input.GetKeyDown(KeyCode.Space))
        {
            // Si el diálogo está escribiendo, mostrar la línea completa actual.
            if (typingCoroutine != null)
            {
                StopCoroutine(typingCoroutine);
                dialogueText.text = currentLineCached;
                typingCoroutine = null;
            }
            else
            {
                // Si no está escribiendo, saltar todas las líneas restantes directamente.
                SkipToEndOfDialogue();
            }
        }

        bool savedHasGun = PlayerPrefs.GetInt("HasGun", 0) == 1;
        if (savedHasGun != playerController.playerHasGun)
        {
            playerController.playerHasGun = savedHasGun;
            Debug.Log("Sincronizando estado del arma desde PlayerPrefs: " + savedHasGun);
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            isPlayerInRange = true;
            dialogueMark.SetActive(true);
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            dialogueMark.SetActive(false);
            isPlayerInRange = false;
        }
    }

    private void StartDialogue()
    {
        didDialogueStart = true;
        dialoguePanel.SetActive(true);
        dialogueMark.SetActive(false);
        lineIndex = 0;
        runParticles.SetActive(false);
        typingCoroutine = StartCoroutine(ShowLine());
        playerController.enabled = false;
        playerAnimator.SetBool("running", false);
    }

    private IEnumerator ShowLine()
    {
        dialogueText.text = string.Empty;

        string currentLine = null;
        localizedDialogueLines[lineIndex].StringChanged += (translatedText) => currentLine = translatedText;
        localizedDialogueLines[lineIndex].RefreshString();

        yield return new WaitUntil(() => currentLine != null);

        currentLineCached = currentLine; // Guardar la línea actual para skip instantáneo

        foreach (char ch in currentLine)
        {
            dialogueText.text += ch;
            yield return new WaitForSecondsRealtime(typingTime);
        }

        typingCoroutine = null;
    }

    private string GetCurrentText()
    {
        string text = null;
        localizedDialogueLines[lineIndex].StringChanged += (translatedText) => text = translatedText;
        localizedDialogueLines[lineIndex].RefreshString();
        return text ?? "";
    }

    private void NextDialogueLine()
    {
        lineIndex++;
        if (lineIndex < localizedDialogueLines.Length)
        {
            typingCoroutine = StartCoroutine(ShowLine());
        }
        else
        {
            string currentScene = SceneManager.GetActiveScene().name;

            bool existingHasGun = PlayerPrefs.GetInt("HasGun", 0) == 1;
            float existingCooldown = PlayerPrefs.GetFloat("ShootCooldown", 0.65f);

            if (currentScene == "Level 1")
            {
                playerController.playerHasGun = true;
                if (existingCooldown > 0.65f || !existingHasGun)
                {
                    playerController.shootCooldown = 0.65f;
                    PlayerPrefs.SetFloat("ShootCooldown", 0.65f);
                }
                PlayerPrefs.SetInt("HasGun", 1);
                BossDialogue = false;
                if (bullet != null)
                    bullet.Damage = 1;
                PlayerPrefs.SetInt("BossDialogue", 0);
                PlayerPrefs.SetInt("BulletDamage", 1);
                PlayerPrefs.Save();
                Debug.Log("Nivel 1 completado: Arma activada, Cooldown=" + playerController.shootCooldown);
            }
            else if (currentScene == "Level 2")
            {
                playerController.playerHasGun = true;
                if (existingCooldown > 0.45f)
                {
                    playerController.shootCooldown = 0.45f;
                    PlayerPrefs.SetFloat("ShootCooldown", 0.45f);
                }
                PlayerPrefs.SetInt("HasGun", 1);
                BossDialogue = false;
                if (bullet != null)
                    bullet.Damage = 1;
                PlayerPrefs.SetInt("BossDialogue", 0);
                PlayerPrefs.SetInt("BulletDamage", 1);
                PlayerPrefs.Save();
                Debug.Log("Nivel 2 completado: Arma activada, Cooldown=" + playerController.shootCooldown);
            }
            else if (currentScene == "Level 3")
            {
                playerController.playerHasGun = true;
                BossDialogue = true;
                PlayerPrefs.SetInt("HasGun", 1);
                PlayerPrefs.SetInt("BossDialogue", 1);

                if (bullet != null)
                {
                    bullet.Damage = 2;
                    PlayerPrefs.SetInt("BulletDamage", 2);
                    Debug.Log("Nivel 3 completado: Daño de bala aumentado a 2");
                }
                PlayerPrefs.Save();
            }

            GameDataManager dataManager = FindObjectOfType<GameDataManager>();
            if (dataManager != null)
            {
                if (currentScene == "Level 3")
                {
                    dataManager.gameData.BossDialogue = BossDialogue;
                    dataManager.gameData.bulletDamage = (bullet != null) ? bullet.Damage : 2;
                    dataManager.gameData.hasGun = true;
                }
                else
                {
                    dataManager.gameData.BossDialogue = false;
                    dataManager.gameData.bulletDamage = 1;
                    dataManager.gameData.hasGun = true;
                }
                dataManager.SaveData();
            }

            didDialogueStart = false;
            dialoguePanel.SetActive(false);
            dialogueMark.SetActive(true);
            playerController.enabled = true;
        }
    }

    // NUEVO: Saltar todas las líneas
    private void SkipToEndOfDialogue()
    {
        StopAllCoroutines();
        lineIndex = localizedDialogueLines.Length - 1;
        dialogueText.text = GetCurrentText();

        // Avanzar inmediatamente al final para ejecutar el cierre
        NextDialogueLine();
    }
}using UnityEngine;
using System.Collections;

public class LasersAttack : MonoBehaviour
{
    public GameObject laserPrefab;  // Prefab del láser
    public Transform[] laserPoints; // Puntos donde pueden aparecer los láseres
    public int minLasers = 3;   // Mínimo de láseres que pueden aparecer
    public int maxLasers = 6;   // Máximo de láseres que pueden aparecer
    public float minDelay = 0.05f; // Tiempo mínimo de delay
    public float maxDelay = 0.2f;  // Tiempo máximo de delay
    public BossAttacksManager bossAttacksManager;
    public BossHealth bossHealth;

    private Coroutine currentCoroutine;

    public void StartLaser()
    {
        if (bossHealth.currentHealth > 0) // Check boss health
        {
            if (currentCoroutine != null) StopCoroutine(currentCoroutine);
            currentCoroutine = StartCoroutine(ActivateLasers());
        }
    }

    private IEnumerator ActivateLasers()
    {
        int lasersToSpawn = Random.Range(minLasers, maxLasers + 1);
        int spawnCount = Mathf.Min(lasersToSpawn, laserPoints.Length);

        Transform[] selectedPoints = SelectRandomPoints(spawnCount);

        foreach (Transform point in selectedPoints)
        {
            GameObject laser = Instantiate(laserPrefab, point.position, Quaternion.identity);
            float randomDelay = Random.Range(minDelay, maxDelay);
            yield return new WaitForSeconds(randomDelay);
        }

        yield return new WaitForSeconds(4f); // Cooldown
        bossAttacksManager.StartNewAttack();
    }

    private Transform[] SelectRandomPoints(int count)
    {
        System.Collections.Generic.List<Transform> availablePoints = new System.Collections.Generic.List<Transform>(laserPoints);
        Transform[] selectedPoints = new Transform[count];

        for (int i = 0; i < count; i++)
        {
            int index = Random.Range(0, availablePoints.Count);
            selectedPoints[i] = availablePoints[index];
            availablePoints.RemoveAt(index);
        }

        return selectedPoints;
    }
}using UnityEngine;
using Unity.Cinemachine;
using System.Collections;
public class BossHealth : MonoBehaviour
{
    public Rigidbody2D rb;
    public int maxHealth = 150;
    public int currentHealth = 150;
    public Animator animator;
    public DialogueBoss dialogueBoss;
    public bool waitingToDie = false;
    public bool isDead = false;
    public Dialogue dialogue;
    private CinemachineImpulseSource impulseSource;
    private Vector3 direction;
    public Animator headAnimator;
    public Rigidbody2D Player;
    public AudioSource audioSource;
    public BossAttacksManager attackManager;
    public AudioClip bossBattleFinal;
    public AudioManager audioManager;

    void Start()
    {
        currentHealth = Mathf.Min(currentHealth, maxHealth);
        rb = GetComponent<Rigidbody2D>();
        impulseSource = GetComponent<CinemachineImpulseSource>();
    }

    public void TakeDamage(int amount)
    {
        if (isDead) return;

        currentHealth -= amount;
        currentHealth = Mathf.Max(currentHealth, 0);
        Debug.Log("Boss Health: " + currentHealth);
        StartCoroutine(HurtSequence());
        if (currentHealth == 0)
        {
            if (dialogue.BossDialogue == true)
            {
                if (dialogueBoss != null && !dialogueBoss.didDialogueStart)
                {
                    DestroyAtacks();
                    Debug.Log("Boss is dead, starting dialogue");
                    DestroyAtacks();
                    dialogueBoss.StartDialogue();
                    DestroyAtacks();
                    waitingToDie = true;
                    DestroyAtacks();
                }
                else if (!waitingToDie)
                {
                    DestroyAtacks();
                    Debug.Log("Dialogue is finish");
                    DestroyAtacks();
                    Die();
                    DestroyAtacks();
                }
            }
            else
            {
                DestroyAtacks();
                Debug.Log("Boss is dead, no dialogue");
                DestroyAtacks();
                Die();
                DestroyAtacks();
            }
        }
    }

    public void Die()
    {
        audioManager.PlayMusic(bossBattleFinal);
        DestroyAtacks();
        direction = new Vector3(1, 1, 1);
        DestroyAtacks();
        if (isDead) return;
        DestroyAtacks();
        animator.updateMode = AnimatorUpdateMode.UnscaledTime;
        DestroyAtacks();
        isDead = true;
        DestroyAtacks();
        rb.bodyType = RigidbodyType2D.Static;
        DestroyAtacks();
        animator.SetBool("Dead", true);
        DestroyAtacks();
        Debug.Log("Boss is dead");
        DestroyAtacks();
        DestroyAtacks();
        DestroyAtacks();
        DestroyAtacks();
    }
    private IEnumerator HurtSequence()
    {
        animator.SetBool("hurt", true);
        headAnimator.SetBool("hurt", true);
        yield return null;
        animator.SetBool("hurt", false);
        headAnimator.SetBool("hurt", false);
    }
    private void DieShake()
    {
        DestroyAtacks();
        ScreenShakeManager.instance.TriggerShake(impulseSource, direction, 0.2f);
    }
    public void DestroyBoss()
    {
        DestroyAtacks();
        gameObject.SetActive(false);
    }
    private void DestroyAtacks()
    {
        string[] tagsToClear = { "Slime", "Bomb", "Laser", "BossBullet" };

        foreach (string tag in tagsToClear)
        {
            GameObject[] objects = GameObject.FindGameObjectsWithTag(tag);
            foreach (GameObject obj in objects)
            {
                Destroy(obj);
            }
        }
    }
}using UnityEngine;

public class BombScript : MonoBehaviour
{
    private Animator animator;
    private bool isCountingDown = false;
    public int damage = 1;
    private bool isExploding = false;
    public Spikes spikes;
    [SerializeField] private AudioManager audioManager;
    private PauseMenu menuPause;

    void Start()
    {
        menuPause = FindObjectOfType<PauseMenu>();
        animator = GetComponent<Animator>();
        Debug.Log("Bomba iniciada correctamente.");
        spikes = GetComponent<Spikes>();
        spikes.enabled = false;
    }

    void Update()
    {
        // Pausar o reanudar la animación dependiendo del estado del menú de pausa
        if (menuPause != null && menuPause.pauseMenu && animator.speed != 0)
        {
            animator.speed = 0; // Pausar la animación
        }
        else if (menuPause != null && !menuPause.pauseMenu && animator.speed == 0)
        {
            animator.speed = 1; // Reanudar la animación
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (!isCountingDown && collision.CompareTag("Player"))
        {
            CountingDown();
        }
    }

    public void CountingDown()
    {
        if (menuPause == null || !menuPause.pauseMenu)
        {
            isCountingDown = true;
            Debug.Log("Cuenta regresiva iniciada.");
            animator.SetBool("CountingDown", true);
        }
    }

    public void Exploding()
    {
        if (menuPause == null || !menuPause.pauseMenu)
        {
            audioManager.PlaySound("Bomb", 0.3f);
            Debug.Log("¡La bomba está explotando!");
            animator.SetBool("Explode", true);
            isExploding = true;
            spikes.enabled = true;
        }
    }

    public void Destroy()
    {
        Destroy(gameObject);
    }
}using TMPro;
using UnityEngine;
using System.Collections.Generic;

public class DropdownResolution : MonoBehaviour
{
    public TMP_Dropdown dropDown;
    Resolution[] resolutions;

    void Start()
    {
        ReviewResolutions();
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.F11))
        {
            ToggleFullScreen();
        }
    }

    void ReviewResolutions()
    {
        resolutions = Screen.resolutions;
        dropDown.ClearOptions();
        List<string> options = new List<string>();
        int currentResolutionIndex = 0;

        for (int i = 0; i < resolutions.Length; i++)
        {
            string option = resolutions[i].width + "x" + resolutions[i].height;
            options.Add(option);

            if (resolutions[i].width == Screen.currentResolution.width &&
                resolutions[i].height == Screen.currentResolution.height)
            {
                currentResolutionIndex = i;
            }
        }

        dropDown.AddOptions(options);
        dropDown.value = currentResolutionIndex;
        dropDown.RefreshShownValue();
    }

    public void ChangeResolution(int resolutionIndex)
    {
        Resolution resolution = resolutions[resolutionIndex];
        Screen.SetResolution(resolution.width, resolution.height, Screen.fullScreen);
    }

    void ToggleFullScreen()
    {
        Screen.fullScreen = !Screen.fullScreen;
    }
}
using UnityEngine;

public class Mage : MonoBehaviour
{
    [Header("Configuración")]
    public GameObject bulletPrefab;
    public Transform firePoint;
    public float fireCooldown = 2f;
    public int damage = 1;
    private float lastShootTime;
    private Transform playerTarget;
    [SerializeField] private AudioManager audioManager;
    public GameObject Player;

    void Start()
    {
        playerTarget = GameObject.FindGameObjectWithTag("Player")?.transform;
    }

    void Update()
    {
        if (playerTarget == null) return;

        HandleRotation();

        if (Time.time >= lastShootTime + fireCooldown)
        {
            float distance = Mathf.Abs(Player.transform.position.x - transform.position.x);

            if (distance < 2.6f)
            {
                audioManager.PlaySound("MageShoot", 0.8f);
                Shoot();
                lastShootTime = Time.time;
            }
        }
    }

    void HandleRotation()
    {
        Vector3 direction = playerTarget.position - transform.position;
        transform.localScale = new Vector3(
            Mathf.Sign(direction.x),
            1f,
            1f
        );
    }

    void Shoot()
    {
        GameObject bullet = Instantiate(bulletPrefab, firePoint.position, Quaternion.identity);
        MageBullet homing = bullet.GetComponent<MageBullet>();

        if (homing != null)
        {
            homing.target = playerTarget;
        }
    }

}using UnityEngine;

public class Grunt : MonoBehaviour
{
    public GameObject Player;
    public GameObject BulletGruntPrefab;
    public Transform firePoint;
    [SerializeField] private AudioManager audioManager;
    public Bullet bullet;
    private float LastShoot;

    void Update()
    {
        HandleOrientation();
        HandleShooting();
    }

    private void HandleOrientation()
    {
        // Ajustar la orientación del Grunt hacia el jugador
        Vector3 direction = Player.transform.position - transform.position;
        transform.localScale = direction.x >= 0 ? Vector3.one : new Vector3(-1.0f, 1.0f, 1.0f);
    }

    private void HandleShooting()
    {
        // Verificar si el jugador está dentro del rango de ataque
        float distance = Mathf.Abs(Player.transform.position.x - transform.position.x);

        if (distance < 2.0f && Time.time > LastShoot + 1.0f)
        {
            // Reproducir el sonido del disparo
            audioManager.PlaySound("GruntShoot", 2f);

            // Disparar la bala
            Shoot();
            LastShoot = Time.time;
        }
    }

    private void Shoot()
    {
        // Determinar la dirección del disparo (izquierda o derecha)
        Vector2 direction = transform.localScale.x == 1.0f ? Vector2.right : Vector2.left;

        // Instanciar la bala en el punto de disparo
        GameObject bulletInstance = Instantiate(BulletGruntPrefab, firePoint.position, Quaternion.identity);

        // Configurar la dirección de la bala
        Bullet bulletComponent = bulletInstance.GetComponent<Bullet>();
        if (bulletComponent != null)
        {
            bulletComponent.SetDirection(direction); // Asignar dirección a la bala
        }
    }
}using UnityEngine;
using UnityEngine.SceneManagement;
using System.Collections;
using System.Collections.Generic;

public class PauseMenu : MonoBehaviour
{
    public GameObject pauseMenuUI;
    public GameDataManager gameDataManager;
    public GameObject hearthsPanel;
    public GameObject gameOverPanel;
    public GameObject settingsPanel;
    public PlayerHealth playerHealth;
    public List<Rigidbody2D> rigidbodies = new List<Rigidbody2D>();
    public Dialogue dialogue;
    public bool pauseMenu;
    public AudioSource audioSource;
    public AudioSource audioSource2;
    public GameObject canvaNPC;
    [SerializeField] private AudioClip click;

    private List<Rigidbody2D> taggedRigidbodies = new List<Rigidbody2D>();

    private void Start()
    {
        pauseMenu = false;

        // Inicializar todos los Rigidbody2D en Dynamic
        foreach (Rigidbody2D rb in rigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Dynamic;
            }
        }
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            if (SceneManager.GetActiveScene().name == "Main Menu")
            {
                return; // No hacer nada si estamos en el menú principal
            }
            if (pauseMenuUI.activeSelf)
            {
                ResumeGame();
            }
            else
            {
                PauseGame();
            }
        }
    }

    public void PauseGame()
    {
        canvaNPC.SetActive(false);
        pauseMenuUI.SetActive(true);
        hearthsPanel.SetActive(false);
        gameOverPanel.SetActive(false);
        playerHealth.isInvulnerable = true;
        pauseMenu = true;
        audioSource.volume = 0.3f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Static;
            }
        }

        foreach (Rigidbody2D rb in taggedRigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Static;
            }
        }
    }

    public void ResumeGame()
    {
        if (dialogue.didDialogueStart == true)
        {
            canvaNPC.SetActive(true);
        }
        else
        {
            canvaNPC.SetActive(false);
        }
        pauseMenuUI.SetActive(false);
        hearthsPanel.SetActive(true);
        StartCoroutine(InvulnerablityTime());
        pauseMenu = false;
        audioSource.volume = 0.8f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Dynamic;
            }
        }

        foreach (Rigidbody2D rb in taggedRigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Dynamic;
            }
        }
    }

    // --- NUEVO: Pausar solo gameplay (sin mostrar UI) ---
    public void PauseGameplayOnly()
    {
        playerHealth.isInvulnerable = true;
        pauseMenu = true;
        audioSource.volume = 0.3f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Static;
        foreach (Rigidbody2D rb in taggedRigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Static;
        // No tocar la UI
    }

    public void ResumeGameplayOnly()
    {
        StartCoroutine(InvulnerablityTime());
        pauseMenu = false;
        audioSource.volume = 0.8f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Dynamic;
        foreach (Rigidbody2D rb in taggedRigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Dynamic;
        // No tocar la UI
    }

    public void Continue()
    {
        ResumeGame();
    }

    public void MainMenu()
    {
        SceneManager.LoadScene("Main Menu");
    }

    public void Quit()
    {
        Application.Quit();
    }

    public void Settings()
    {
        settingsPanel.SetActive(true);
        pauseMenuUI.SetActive(false);
        playerHealth.isInvulnerable = true;
    }

    public void ExitSettings()
    {
        settingsPanel.SetActive(false);
        pauseMenuUI.SetActive(true);
        playerHealth.isInvulnerable = true;
    }

    private IEnumerator InvulnerablityTime()
    {
        yield return new WaitForSeconds(0.5f);
        playerHealth.isInvulnerable = false;
    }

    private void UpdateTaggedRigidbodies()
    {
        taggedRigidbodies.Clear();
        AddRigidbodiesWithTag("Player");
        AddRigidbodiesWithTag("Bullet");
        AddRigidbodiesWithTag("BossBullet");
        AddRigidbodiesWithTag("MageBullet");
        AddRigidbodiesWithTag("Slime");
    }

    private void AddRigidbodiesWithTag(string tag)
    {
        GameObject[] taggedObjects = GameObject.FindGameObjectsWithTag(tag);

        foreach (GameObject obj in taggedObjects)
        {
            Rigidbody2D rb = obj.GetComponent<Rigidbody2D>();
            if (rb != null)
            {
                taggedRigidbodies.Add(rb);
            }
        }
    }
    public void ClickSound()
    {
        audioSource2.PlayOneShot(click);
        Debug.Log("Click Sound");
    }
}using UnityEngine;
using UnityEngine.SceneManagement;
using System.Collections;
using System.Collections.Generic;

public class PauseMenu : MonoBehaviour
{
    public GameObject pauseMenuUI;
    public GameDataManager gameDataManager;
    public GameObject hearthsPanel;
    public GameObject gameOverPanel;
    public GameObject settingsPanel;
    public PlayerHealth playerHealth;
    public List<Rigidbody2D> rigidbodies = new List<Rigidbody2D>();
    public Dialogue dialogue;
    public bool pauseMenu;
    public AudioSource audioSource;
    public AudioSource audioSource2;
    public GameObject canvaNPC;
    [SerializeField] private AudioClip click;

    private List<Rigidbody2D> taggedRigidbodies = new List<Rigidbody2D>();

    private void Start()
    {
        pauseMenu = false;

        // Inicializar todos los Rigidbody2D en Dynamic
        foreach (Rigidbody2D rb in rigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Dynamic;
            }
        }
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            if (SceneManager.GetActiveScene().name == "Main Menu")
            {
                return; // No hacer nada si estamos en el menú principal
            }
            if (pauseMenuUI.activeSelf)
            {
                ResumeGame();
            }
            else
            {
                PauseGame();
            }
        }
    }

    public void PauseGame()
    {
        canvaNPC.SetActive(false);
        pauseMenuUI.SetActive(true);
        hearthsPanel.SetActive(false);
        gameOverPanel.SetActive(false);
        playerHealth.isInvulnerable = true;
        pauseMenu = true;
        audioSource.volume = 0.3f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Static;
            }
        }

        foreach (Rigidbody2D rb in taggedRigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Static;
            }
        }
    }

    public void ResumeGame()
    {
        if (dialogue.didDialogueStart == true)
        {
            canvaNPC.SetActive(true);
        }
        else
        {
            canvaNPC.SetActive(false);
        }
        pauseMenuUI.SetActive(false);
        hearthsPanel.SetActive(true);
        StartCoroutine(InvulnerablityTime());
        pauseMenu = false;
        audioSource.volume = 0.8f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Dynamic;
            }
        }

        foreach (Rigidbody2D rb in taggedRigidbodies)
        {
            if (rb != null)
            {
                rb.bodyType = RigidbodyType2D.Dynamic;
            }
        }
    }

    // --- NUEVO: Pausar solo gameplay (sin mostrar UI) ---
    public void PauseGameplayOnly()
    {
        playerHealth.isInvulnerable = true;
        pauseMenu = true;
        audioSource.volume = 0.3f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Static;
        foreach (Rigidbody2D rb in taggedRigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Static;
        // No tocar la UI
    }

    public void ResumeGameplayOnly()
    {
        StartCoroutine(InvulnerablityTime());
        pauseMenu = false;
        audioSource.volume = 0.8f;

        UpdateTaggedRigidbodies();

        foreach (Rigidbody2D rb in rigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Dynamic;
        foreach (Rigidbody2D rb in taggedRigidbodies)
            if (rb != null) rb.bodyType = RigidbodyType2D.Dynamic;
        // No tocar la UI
    }

    public void Continue()
    {
        ResumeGame();
    }

    public void MainMenu()
    {
        SceneManager.LoadScene("Main Menu");
    }

    public void Quit()
    {
        Application.Quit();
    }

    public void Settings()
    {
        settingsPanel.SetActive(true);
        pauseMenuUI.SetActive(false);
        playerHealth.isInvulnerable = true;
    }

    public void ExitSettings()
    {
        settingsPanel.SetActive(false);
        pauseMenuUI.SetActive(true);
        playerHealth.isInvulnerable = true;
    }

    private IEnumerator InvulnerablityTime()
    {
        yield return new WaitForSeconds(0.5f);
        playerHealth.isInvulnerable = false;
    }

    private void UpdateTaggedRigidbodies()
    {
        taggedRigidbodies.Clear();
        AddRigidbodiesWithTag("Player");
        AddRigidbodiesWithTag("Bullet");
        AddRigidbodiesWithTag("BossBullet");
        AddRigidbodiesWithTag("MageBullet");
        AddRigidbodiesWithTag("Slime");
    }

    private void AddRigidbodiesWithTag(string tag)
    {
        GameObject[] taggedObjects = GameObject.FindGameObjectsWithTag(tag);

        foreach (GameObject obj in taggedObjects)
        {
            Rigidbody2D rb = obj.GetComponent<Rigidbody2D>();
            if (rb != null)
            {
                taggedRigidbodies.Add(rb);
            }
        }
    }
    public void ClickSound()
    {
        audioSource2.PlayOneShot(click);
        Debug.Log("Click Sound");
    }
}using UnityEngine;
using UnityEngine.SceneManagement;
using System.Collections;
using TMPro;
using UnityEngine.Audio;

public class FinalMenu : MonoBehaviour
{
    [SerializeField] private TMP_Text badFinalText;
    [SerializeField] private Dialogue dialogue;
    [SerializeField] private BossHealth bossHealth;
    [SerializeField] private GameObject badFinalPanel;
    [SerializeField] private GameObject goodFinalPanel;
    [SerializeField] private GameObject darkPanel;
    [SerializeField] private GameObject hearthPanel;
    [SerializeField] private GameObject player;
    [SerializeField] private BossAttacksManager attackManager;
    [SerializeField] private AudioClip goodFinalMusic;
    [SerializeField] private AudioClip badFinalMusic;
    [SerializeField] private AudioManager audioManager;
    [SerializeField] private PauseMenu pauseMenu; // <-- Referencia asignable en Inspector
    public AudioMixer audioMixer;

    private bool hasTriggeredFinal = false;
    private GameDataManager gameDataManager;
    private bool goodFinal;
    private bool badFinal;

    private void Start()
    {
        gameDataManager = FindObjectOfType<GameDataManager>();

        if (gameDataManager.gameData == null)
            gameDataManager.InitializeDefaultData();

        gameDataManager.LoadData();

        GameData data = gameDataManager.gameData;

        if (data.goodFinal)
        {
            ActivateGoodFinal();
        }
        else if (data.badFinal)
        {
            ActivateBadFinal();
        }
    }

    private void Update()
    {
        FinalSelector();

        if ((goodFinal || badFinal) && Input.GetKeyDown(KeyCode.Space))
        {
            if (FadeController.Instance.IsFadeComplete())
            {
                SceneManager.LoadScene("Main Menu");
            }
        }
    }

    private void ActivateGoodFinal()
    {
        pauseMenu.PauseGameplayOnly(); // Pausa solo gameplay, sin mostrar menú
        goodFinalPanel.SetActive(true);
        badFinalPanel.SetActive(false);
        hearthPanel.SetActive(false);
        goodFinal = true;
        if (audioManager != null && goodFinalMusic != null)
            audioManager.PlayMusic(goodFinalMusic);
    }

    private void ActivateBadFinal()
    {
        pauseMenu.PauseGameplayOnly(); // Pausa solo gameplay, sin mostrar menú
        badFinalPanel.SetActive(true);
        goodFinalPanel.SetActive(false);
        hearthPanel.SetActive(false);
        badFinal = true;
        if (audioManager != null && badFinalMusic != null)
            audioManager.PlayMusic(badFinalMusic);
    }

    private IEnumerator GoodFinalCoroutine()
    {
        yield return PauseMenuAwareWaitForSeconds(2.6f);
        Debug.Log("GoodFinal");
        if (audioManager != null && goodFinalMusic != null)
            audioManager.CrossfadeMusic(goodFinalMusic, 1.5f);
        audioManager.musicSource.volume = 1.2f;
        audioMixer.SetFloat("Master", 3f);

        badFinalPanel.SetActive(false);
        darkPanel.SetActive(false);

        FadeController.Instance.FadeIn(() =>
        {
            Debug.Log("GoodFinal Panel");
            gameDataManager.gameData.goodFinal = true;
            gameDataManager.gameData.level3Unlocked = true;
            gameDataManager.SaveData();
            ActivateGoodFinal();
        }, 1.5f);

        yield return PauseMenuAwareWaitForSeconds(3f);
    }

    private IEnumerator BadFinalCoroutine()
    {
        yield return PauseMenuAwareWaitForSeconds(2.6f);
        darkPanel.SetActive(true);
        goodFinalPanel.SetActive(false);
        badFinalPanel.SetActive(false);
        if (audioManager != null && badFinalMusic != null)
            audioManager.CrossfadeMusic(badFinalMusic, 1.5f);
        audioManager.musicSource.volume = 1.3f;
        audioMixer.SetFloat("Master", 3f);
        bool fadeDone = false;
        FadeController.Instance.FadeIn(() => fadeDone = true, 0.15f);
        yield return new WaitUntil(() => fadeDone);
        player.transform.position = new Vector3(-9.6882f, -0.142f, 0f);
        fadeDone = false;
        FadeController.Instance.FadeOut(() => fadeDone = true, 0.15f);
        yield return new WaitUntil(() => fadeDone);
        darkPanel.SetActive(false);
        goodFinalPanel.SetActive(false);
        badFinalPanel.SetActive(true);
        yield return PauseMenuAwareWaitForSeconds(6f);

        Debug.Log("BadFinal");
        goodFinalPanel.SetActive(false);

        FadeController.Instance.FadeIn(() =>
        {
            Debug.Log("BadFinal Panel");
            ActivateBadFinal();
            gameDataManager.gameData.badFinal = true;
            gameDataManager.gameData.BossDialogue = false;
            gameDataManager.gameData.resetBossDialogueOnMenu = true;
            gameDataManager.SaveData();
        }, 0.75f);

        yield return PauseMenuAwareWaitForSeconds(2.5f);
    }

    private void FinalSelector()
    {
        if (hasTriggeredFinal) return;

        if (bossHealth.currentHealth <= 0 && dialogue.BossDialogue == true && !bossHealth.waitingToDie)
        {
            hasTriggeredFinal = true;
            Debug.Log("badFinal");

            player.GetComponent<Rigidbody2D>().bodyType = RigidbodyType2D.Static;
            StartCoroutine(BadFinalCoroutine());
        }
        else if (bossHealth.currentHealth <= 0 && !dialogue.BossDialogue)
        {
            Debug.Log("goodFinal");
            hasTriggeredFinal = true;
            StartCoroutine(GoodFinalCoroutine());
        }
    }

    public void TeleportPlayer()
    {
        if (hasTriggeredFinal) return;
        if (bossHealth.currentHealth <= 0 && dialogue.BossDialogue == true && !bossHealth.waitingToDie)
        {
            player.transform.position = new Vector3(-9.6882f, -0.142f, 0f);
        }
    }

    // --- Pausa-aware WaitForSeconds usando referencia serializada ---
    private IEnumerator PauseMenuAwareWaitForSeconds(float seconds)
    {
        float elapsed = 0f;
        while (elapsed < seconds)
        {
            // Espera si el menú de pausa está activo (gameplay freeze)
            while (pauseMenu != null && pauseMenu.pauseMenu)
                yield return null;

            elapsed += Time.deltaTime;
            yield return null;
        }
    }
}using UnityEngine;
public class GameData
{
    public Vector3 PlayerPosition;
    public int currentHealth;
    public bool hasGun;
    public bool BossDialogue;
    public string currentScene;
    public float shootCooldown;
    public bool goodFinal;
    public bool badFinal;
    public bool level3Unlocked;
    public bool resetBossDialogueOnMenu;
    public int bulletDamage;
}using UnityEngine;
using UnityEngine.SceneManagement;

public class LevelPass : MonoBehaviour
{
    public string NextLevel;
    public Rigidbody2D rb;
    public float rotationSpeed = 1f;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
    }

    void FixedUpdate()
    {
        Vector3 rotation = transform.rotation.eulerAngles;
        rotation.y += rotationSpeed;
        transform.rotation = Quaternion.Euler(rotation);
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            ModeSelector();
            SceneManager.LoadScene(NextLevel);

            // Guardamos la escena actual como la última escena jugada
            PlayerPrefs.SetString("LastLevel", SceneManager.GetActiveScene().name);
            PlayerPrefs.Save();
        }
    }

    private void ModeSelector()
    {
        if (SceneManager.GetActiveScene().name == "Level 2")
        {
            PlayerPrefs.SetInt("Level2Unlocked", 1);
            PlayerPrefs.Save();
        }
        else if (SceneManager.GetActiveScene().name == "Level 3")
        {
            PlayerPrefs.SetInt("Level3unlocked", 1);
            PlayerPrefs.Save();
        }
    }
}
using UnityEngine;

public class BossBullet : MonoBehaviour
{
    private Rigidbody2D Rigidbody2D;
    private Vector2 Direction;
    private Animator animator;

    public float Speed;
    public int Damage = 1;

    void Start()
    {
        Rigidbody2D = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        HandleCollision(collision);
    }

    private void HandleCollision(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            collision.GetComponent<PlayerHealth>()?.TakeDamage(Damage);
        }
        if (collision.CompareTag("Enemy"))
        {
            collision.GetComponent<EnemyHealth>()?.TakeDamage(Damage);
        }

        if (collision.CompareTag("Obstacle") || collision.CompareTag("Enemy") || collision.CompareTag("Player"))
        {
            animator.SetBool("hit", true);
            Rigidbody2D.bodyType = RigidbodyType2D.Static;
        }
    }

    public void DestroyBullet()
    {
        Rigidbody2D.bodyType = RigidbodyType2D.Dynamic;
        Destroy(gameObject);
    }
}

using UnityEngine;
using Unity.Cinemachine;

public class ScreenShakeManager : MonoBehaviour
{
    public static ScreenShakeManager instance;
    [SerializeField] private float shakeForce = 0.1f;
    private CinemachineImpulseSource impulseSource;
    private Vector3 direction;

    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }

        impulseSource = GetComponent<CinemachineImpulseSource>();
    }

    public void TriggerShake(CinemachineImpulseSource impulseSource, Vector3 direction, float force)
    {
        impulseSource.GenerateImpulse(direction * force);
    }
}using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
public class VolumeManager : MonoBehaviour
{
    public Slider slider;
    public float sliderValue;
    void Start()
    {
        slider.value = PlayerPrefs.GetFloat("Volume", 0.5f);
        AudioListener.volume = slider.value;
    }
    public void SetVolume(float value)
    {
        sliderValue = value;
        AudioListener.volume = sliderValue;
        PlayerPrefs.SetFloat("Volume", sliderValue);
        PlayerPrefs.Save();
        Debug.Log("Volume set to: " + sliderValue);
    }
}
using UnityEngine;

[ExecuteInEditMode]
public class ParallaxLayer : MonoBehaviour
{
    public float parallaxFactor;

    public void Move(float delta)
    {
        Vector3 newPos = transform.localPosition;
        newPos.x -= delta * parallaxFactor;

        transform.localPosition = newPos;
    }
}using Unity.Cinemachine;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    // Private
    private Rigidbody2D rb;
    private Animator animator;
    private float LastShoot;
    private float escaleGravity;
    private bool jumpButtonUp = true;
    private CinemachineImpulseSource impulseSource;
    private bool isJumping = false;

    //Serialized
    [SerializeField] private float gravityMultiplier;
    [Range(0, 1)][SerializeField] private float multiplicationCancelJump;
    [SerializeField] private GameObject runParticles;
    [SerializeField] private AudioManager audioManager;

    // Public
    public float speed = 5f;
    public float jumpForce = 5f;
    public GameObject BulletPrefab;
    public bool playerHasGun;
    public float shootCooldown = 0.65f;
    public bool grounded;
    public PlayerHealth playerHealth;
    public float jumpSpeedBoost = 5;
    public float TimeScale = 1f;
    public float CoyoteTimeCounter;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        escaleGravity = rb.gravityScale;
        impulseSource = GetComponent<CinemachineImpulseSource>();
    }

    void Update()
    {
        if (PlayerPrefs.GetInt("HasGun") == 1)
        {
            playerHasGun = true;
        }
        // Dead Check
        if (playerHealth != null && playerHealth.IsDead())
        {
            return;
        }
        impulseSource = GetComponent<CinemachineImpulseSource>();
        Debug.Log("Player Gun: " + playerHasGun);
        Debug.Log("Shoot Couldown: " + shootCooldown);

        // Movement System
        HandleMovement();

        // Raycast System
        CheckGrounded();

        // Jump System
        HandleJump();

        // Animator Running System
        UpdateAnimatorRunning();

        // Orientation System
        UpdateOrientation();

        // Shoot System
        HandleShooting();

        // Wall Collision
        HandleWallCollision();
    }

    void FixedUpdate()
    {
        if (rb.linearVelocity.y >= 0.2 && !grounded && CoyoteTimeCounter >= 0.1f)
        {
            if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.D))
            {
                float direction = Mathf.Sign(transform.localScale.x);
                rb.AddForce(new Vector2(direction * jumpSpeedBoost, 0), ForceMode2D.Impulse);
                Debug.Log("Jump Speed Boost");
                grounded = false;
            }
            grounded = false;
        }
        else if (rb.linearVelocity.y < 0 && !grounded)
        {
            rb.gravityScale = escaleGravity * gravityMultiplier;
            grounded = false;
        }
        else
        {
            rb.gravityScale = escaleGravity;
        }
    }

    private void HandleMovement()
    {
        float horizontal = Input.GetAxisRaw("Horizontal");
        rb.linearVelocity = new Vector2(horizontal * speed, rb.linearVelocity.y);
    }

    private void CheckGrounded()
    {
        float rayLength = 0.15f;

        Vector2 centerOrigin = new Vector2(transform.position.x - 0.01f, transform.position.y);
        Vector2 leftOrigin = new Vector2(transform.position.x - 0.06f, transform.position.y);
        Vector2 rightOrigin = new Vector2(transform.position.x + 0.04f, transform.position.y);

        RaycastHit2D hitCenter = Physics2D.Raycast(centerOrigin, Vector2.down, rayLength);
        RaycastHit2D hitLeft = Physics2D.Raycast(leftOrigin, Vector2.down, rayLength);
        RaycastHit2D hitRight = Physics2D.Raycast(rightOrigin, Vector2.down, rayLength);

        bool isGrounded = false;
        RaycastHit2D hitToCheck = new RaycastHit2D();

        if (hitCenter.collider != null)
        {
            isGrounded = true;
            hitToCheck = hitCenter;
        }
        else if (hitLeft.collider != null)
        {
            isGrounded = true;
            hitToCheck = hitLeft;
        }
        else if (hitRight.collider != null)
        {
            isGrounded = true;
            hitToCheck = hitRight;
        }

        if (isGrounded)
        {
            if (hitToCheck.collider.CompareTag("CheckPoint"))
            {
                grounded = false;
            }
            else
            {
                grounded = true;
                isJumping = false;
            }
            CoyoteTimeCounter = 0;
        }
        else
        {
            grounded = false;
            CoyoteTimeCounter += Time.deltaTime;
        }
    }

    private void HandleJump()
    {
        if (Input.GetKey(KeyCode.W) && CoyoteTimeCounter < 0.1f && jumpButtonUp)
        {
            audioManager.PlaySound("Jump2", 0.8f);
            isJumping = true;
            rb.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
            jumpButtonUp = false;
        }
        else if (Input.GetKeyUp(KeyCode.W))
        {
            JumpButtonUp();
        }
    }

    private void JumpButtonUp()
    {
        if (rb.linearVelocity.y > 0)
        {
            rb.AddForce(Vector2.down * rb.linearVelocity.y * (1 - multiplicationCancelJump), ForceMode2D.Impulse);
        }
        jumpButtonUp = true;
    }

    private void UpdateAnimatorRunning()
    {
        if (rb.bodyType == RigidbodyType2D.Static)
        {
            animator.SetBool("running", false);

            if (runParticles.activeSelf)
                runParticles.SetActive(false);

            return;
        }
        float horizontal = Input.GetAxisRaw("Horizontal");
        animator.SetBool("running", horizontal != 0f);
        if (horizontal != 0f && grounded == true)
        {
            if (!runParticles.activeSelf)
                runParticles.SetActive(true);
        }
        else
        {
            if (runParticles.activeSelf)
                runParticles.SetActive(false);
        }
    }

    private void UpdateOrientation()
    {
        float horizontal = Input.GetAxisRaw("Horizontal");
        if (horizontal < 0.0f)
            transform.localScale = new Vector3(-1.0f, 1.0f, 1.0f);
        else if (horizontal > 0.0f)
            transform.localScale = new Vector3(1.0f, 1.0f, 1.0f);
    }

    private void HandleShooting()
    {
        if (Input.GetKey(KeyCode.Space) && Time.time > LastShoot + shootCooldown)
        {
            if (playerHasGun == true)
            {
                audioManager.PlaySound("PlayerShoot", 0.8f);
                Shoot();
                LastShoot = Time.time;
            }
        }
    }

    private void Shoot()
    {
        ScreenShakeManager.instance.TriggerShake(impulseSource, Vector3.right, 0.015f);
        Recoil(50f);
        Vector2 direction = transform.localScale.x == 1.0f ? Vector2.right : Vector2.left;

        GameObject bullet = Instantiate(BulletPrefab, transform.position + (Vector3)direction * 0.1f, Quaternion.identity);
        Bullet bulletScript = bullet.GetComponent<Bullet>();

        // Siempre toma el daño del prefab para cualquier instancia
        if (BulletPrefab != null)
        {
            Bullet prefabScript = BulletPrefab.GetComponent<Bullet>();
            if (prefabScript != null)
                bulletScript.Damage = prefabScript.Damage;
        }

        bulletScript.SetDirection(direction);
    }

    private void HandleWallCollision()
    {
        WallCollision();
    }

    private void WallCollision()
    {
        float wallCheckDistance = 0.06f;
        Vector2 direction = new Vector2(transform.localScale.x, 0);

        Debug.DrawRay(transform.position, direction * wallCheckDistance, Color.red); // visual debug
        RaycastHit2D hit = Physics2D.Raycast(transform.position, direction, wallCheckDistance);

        if (hit.collider != null && hit.collider.CompareTag("Obstacle"))
        {
            rb.linearVelocity = new Vector2(0, rb.linearVelocity.y);
            Debug.Log("Wall Collision");
        }

        Debug.DrawRay(transform.position, direction * wallCheckDistance, Color.yellow); // visual debug
    }

    private void Recoil(float recoilForce)
    {
        Vector2 direction = transform.localScale.x == 1.0f ? Vector2.left : Vector2.right;
        rb.AddForce(direction * recoilForce, ForceMode2D.Force);
        Debug.Log("Recoil applied in direction: " + direction);
    }
}using UnityEngine;
using static Unity.Collections.Unicode;
using System.Collections;

public class SlimeHealth : MonoBehaviour
{
    public int maxHealth = 3;
    public int currentHealth = 3;
    public Animator animator;
    public SlimeControl slime;
    private Rigidbody2D rb;

    void Start()
    {
        currentHealth = Mathf.Max(currentHealth, maxHealth);
        slime = GetComponent<SlimeControl>();
        rb = GetComponent<Rigidbody2D>();
    }

    public void TakeDamage(int amount)
    {
        StartCoroutine(HurtSequence());
        currentHealth -= amount;
        currentHealth = Mathf.Max(currentHealth, 0);
        Debug.Log("Slime Health: " + currentHealth);

        if (currentHealth == 0)
        {
            StartCoroutine(Die());
        }
    }
    private IEnumerator Die()
    {
        StartCoroutine(HurtSequence());
        yield return new WaitForSeconds(0.2f);
        rb.bodyType = RigidbodyType2D.Static;
        animator.SetBool("die", true);
    }
    private IEnumerator HurtSequence()
    {
        animator.SetBool("hurt", true);
        Time.timeScale = 0f;
        slime.Velocity = 0f;
        yield return new WaitForSecondsRealtime(0.05f);
        Time.timeScale = 1f;
        yield return new WaitForSecondsRealtime(0.15f);
        animator.SetBool("hurt", false);
        slime.Velocity = 0.5f;
    }

    public void DestroyEnemy() => Destroy(gameObject);
}

using System.Collections.Generic;
using UnityEngine;

[ExecuteInEditMode]
public class ParallaxBackground : MonoBehaviour
{
    public ParallaxCamera parallaxCamera;
    List<ParallaxLayer> parallaxLayers = new List<ParallaxLayer>();

    void Start()
    {
        if (parallaxCamera == null)
            parallaxCamera = Camera.main.GetComponent<ParallaxCamera>();

        if (parallaxCamera != null)
            parallaxCamera.onCameraTranslate += Move;

        SetLayers();
    }

    void SetLayers()
    {
        parallaxLayers.Clear();

        for (int i = 0; i < transform.childCount; i++)
        {
            ParallaxLayer layer = transform.GetChild(i).GetComponent<ParallaxLayer>();

            if (layer != null)
            {
                layer.name = "Layer-" + i;
                parallaxLayers.Add(layer);
            }
        }
    }

    void Move(float delta)
    {
        foreach (ParallaxLayer layer in parallaxLayers)
        {
            layer.Move(delta);
        }
    }
}using UnityEngine;
using TMPro;
using UnityEngine.Localization;
using UnityEngine.Localization.Components;

public class DotLoadingEffectLocalized : MonoBehaviour
{
    [Header("Localización")]
    public LocalizeStringEvent localizedStringEvent;
    public TextMeshProUGUI textMesh;

    [Header("Animación")]
    public float dotInterval = 0.4f; // Tiempo entre cada punto
    public int dotCount = 3; // Número máximo de puntos
    public AnimationCurve dotAnimationCurve = AnimationCurve.EaseInOut(0, 0, 1, 1); // Curva de suavizado

    private string baseText = ""; // Texto base traducido
    private float timer = 0f; // Temporizador
    private int currentDots = 0; // Estado actual de los puntos

    void OnEnable()
    {
        if (localizedStringEvent == null) localizedStringEvent = GetComponent<LocalizeStringEvent>();
        if (localizedStringEvent != null)
            localizedStringEvent.OnUpdateString.AddListener(UpdateBaseText);
        UpdateBaseText(localizedStringEvent.StringReference.GetLocalizedString());
    }

    void OnDisable()
    {
        if (localizedStringEvent != null)
            localizedStringEvent.OnUpdateString.RemoveListener(UpdateBaseText);
    }

    void UpdateBaseText(string value)
    {
        baseText = value;
        // Reinicia la animación si cambia el texto
        currentDots = 0;
        timer = 0f;
        UpdateText();
    }

    void Update()
    {
        timer += Time.deltaTime;
        if (timer >= dotInterval)
        {
            timer = 0f;
            currentDots = (currentDots + 1) % (dotCount + 1); // Cicla entre 0 y dotCount
            UpdateText();
        }
    }

    void UpdateText()
    {
        if (textMesh == null) textMesh = GetComponent<TextMeshProUGUI>();

        // Suaviza el número de puntos con la curva de animación
        float easedDots = dotAnimationCurve.Evaluate((float)currentDots / dotCount);
        int visibleDots = Mathf.RoundToInt(easedDots * dotCount);

        textMesh.text = baseText + new string('.', visibleDots);
    }
}using UnityEngine;
using UnityEngine.SceneManagement;

public class MainMenu : MonoBehaviour
{
    [SerializeField] private GameObject mainMenuPanel;
    [SerializeField] private GameObject settingsPanel;
    [SerializeField] private GameObject selectGameMode;
    [SerializeField] private GameDataManager gameDataManager;
    [SerializeField] private GameObject selectGameSave;
    [SerializeField] private GameObject selectLanguage;
    [SerializeField] private AudioManager audioManager;
    private void Start()
    {
        // Comprobar si necesitamos resetear el diálogo del jefe al volver al menú
        if (gameDataManager != null && gameDataManager.gameData != null && gameDataManager.gameData.resetBossDialogueOnMenu)
        {
            Debug.Log("Reseteando BossDialogue según la configuración");
            PlayerPrefs.SetInt("BossDialogue", 0);
            gameDataManager.gameData.BossDialogue = false;
            gameDataManager.gameData.resetBossDialogueOnMenu = false;
            gameDataManager.SaveData();
        }
    }

    public void Settings()
    {
        mainMenuPanel.SetActive(false);
        settingsPanel.SetActive(true);
    }

    public void SelectGameMode()
    {
        mainMenuPanel.SetActive(false);
        selectGameMode.SetActive(true);
    }

    public void ExitSelectMode()
    {
        mainMenuPanel.SetActive(true);
        selectGameMode.SetActive(false);
    }

    public void ExitGame()
    {
        Application.Quit();
    }

    public void ExitSettings()
    {
        mainMenuPanel.SetActive(true);
        settingsPanel.SetActive(false);
    }

    public void SelectGameSave()
    {
        selectGameMode.SetActive(false);
        selectGameSave.SetActive(true);
    }

    public void ExitSelectGameSave()
    {
        mainMenuPanel.SetActive(true);
        selectGameSave.SetActive(false);
    }

    public void SelectLanguage()
    {
        settingsPanel.SetActive(false);
        selectLanguage.SetActive(true);
    }

    public void ExitLanguage()
    {
        settingsPanel.SetActive(true);
        selectLanguage.SetActive(false);
    }

    public void NewGame()
    {
        Debug.Log("Iniciando nuevo juego...");

        // Reiniciar PlayerPrefs primero
        PlayerPrefs.SetInt("HasGun", 0);
        PlayerPrefs.SetInt("BossDialogue", 0);
        PlayerPrefs.SetFloat("ShootCooldown", 0.65f);
        PlayerPrefs.Save();

        // Luego inicializar datos por defecto
        if (gameDataManager != null)
        {
            gameDataManager.InitializeDefaultData();
        }

        SceneManager.LoadScene("Level 1");
    }

    public void ContinueGame()
    {
        Debug.Log("Continuando juego guardado...");
        if (gameDataManager != null)
        {
            gameDataManager.LoadData();
        }
        else
        {
            Debug.LogError("GameDataManager no asignado en MainMenu");
        }
    }
    public void ClickSound()
    {
         audioManager.PlaySound("ClickSound", 1.5f);
        Debug.Log("Click Sound");
    }
}using UnityEngine;

[ExecuteInEditMode]
public class ParallaxCamera : MonoBehaviour
{
    public delegate void ParallaxCameraDelegate(float deltaMovement);
    public ParallaxCameraDelegate onCameraTranslate;

    private float oldPosition;

    void Start()
    {
        oldPosition = transform.position.x;
    }

    void Update()
    {
        if (transform.position.x != oldPosition)
        {
            if (onCameraTranslate != null)
            {
                float delta = oldPosition - transform.position.x;
                onCameraTranslate(delta);
            }

            oldPosition = transform.position.x;
        }
    }
}using UnityEngine;
using System.Collections;
public class MageHealth : MonoBehaviour
{
    public int maxHealth = 5;
    public int currentHealth = 5;
    public Animator animator;
    public Mage mage;

    void Start()
    {
        currentHealth = Mathf.Max(currentHealth, maxHealth);
        mage = GetComponent<Mage>();
    }

    public void TakeDamage(int amount)
    {
        currentHealth -= amount;
        currentHealth = Mathf.Max(currentHealth, 0);
        Debug.Log("Mage Health: " + currentHealth);
        StartCoroutine(HurtSequence());

        if (currentHealth == 0)
        {
            StartCoroutine(Die());
        }
    }

    private IEnumerator Die()
    {
        StartCoroutine(HurtSequence());
        yield return new WaitForSeconds(0.2f);
        if (mage != null)
        mage.enabled = false;
        animator.SetBool("isDead", true);
    }
    private IEnumerator HurtSequence()
    {
        animator.SetBool("hurt", true);
        Time.timeScale = 0f;
        yield return new WaitForSecondsRealtime(0.05f);
        Time.timeScale = 1f;
        yield return new WaitForSecondsRealtime(0.15f);
        animator.SetBool("hurt", false);
    }
    public void DestroyMage() => Destroy(gameObject);
}
using UnityEngine;

public class HeartUIManager : MonoBehaviour
{
    public GameObject heartFull1, heartFull2, heartFull3;
    public GameObject heartHalf1, heartHalf2, heartHalf3;
    public GameObject heartEmpty1, heartEmpty2, heartEmpty3;

    public PlayerHealth playerHealth;

    void Update()
    {
        UpdateHearts();
    }

    void UpdateHearts()
    {
        if (playerHealth == null) return;

        int currentHealth = playerHealth.GetCurrentHealth();

        // Heart 1
        if (currentHealth >= 6)
        {
            heartFull1.SetActive(true);
            heartHalf1.SetActive(false);
            heartEmpty1.SetActive(false);
        }
        else if (currentHealth == 5)
        {
            heartFull1.SetActive(false);
            heartHalf1.SetActive(true);
            heartEmpty1.SetActive(false);
        }
        else
        {
            heartFull1.SetActive(false);
            heartHalf1.SetActive(false);
            heartEmpty1.SetActive(true);
        }

        // Heart 2
        if (currentHealth >= 4)
        {
            heartFull2.SetActive(true);
            heartHalf2.SetActive(false);
            heartEmpty2.SetActive(false);
        }
        else if (currentHealth == 3)
        {
            heartFull2.SetActive(false);
            heartHalf2.SetActive(true);
            heartEmpty2.SetActive(false);
        }
        else
        {
            heartFull2.SetActive(false);
            heartHalf2.SetActive(false);
            heartEmpty2.SetActive(true);
        }

        // Heart 3
        if (currentHealth >= 2)
        {
            heartFull3.SetActive(true);
            heartHalf3.SetActive(false);
            heartEmpty3.SetActive(false);
        }
        else if (currentHealth == 1)
        {
            heartFull3.SetActive(false);
            heartHalf3.SetActive(true);
            heartEmpty3.SetActive(false);
        }
        else
        {
            heartFull3.SetActive(false);
            heartHalf3.SetActive(false);
            heartEmpty3.SetActive(true);
        }
    }
}
using UnityEngine;

public class DamageCollision : MonoBehaviour
{
    public int damage = 1;
    public float damageCooldown = 1f;
    private float nextDamageTime = 0f;

    private void OnCollisionStay2D(Collision2D collision)
    {
        if (!this.enabled) return;

        if (collision.collider.CompareTag("Player"))
        {
            if (Time.time >= nextDamageTime)
            {
                collision.collider.GetComponent<PlayerHealth>()?.TakeDamage(damage);
                Debug.Log("Daño aplicado al jugador (Stay)");
                nextDamageTime = Time.time + damageCooldown;
            }
        }
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (!this.enabled) return;

        if (collision.collider.CompareTag("Player"))
        {
            if (Time.time >= nextDamageTime)
            {
                collision.collider.GetComponent<PlayerHealth>()?.TakeDamage(damage);
                Debug.Log("Daño aplicado al jugador (Enter)");
                nextDamageTime = Time.time + damageCooldown;
            }
        }
    }
}
using UnityEngine;
using UnityEngine.Localization.Settings;
using System.Collections;

public class LanguageManager : MonoBehaviour
{
    private bool active = false;
    void Start()
    {
        int ID = PlayerPrefs.GetInt("LocalKey", 0);
        ChangeLocale(ID);
    }
    public void ChangeLocale(int localeID)
    {
        if (active)
        {
            return;
        }
        StartCoroutine(SetLocale(localeID));
    }

    private IEnumerator SetLocale(int localeID)
    {
        active = true;
        yield return LocalizationSettings.InitializationOperation;
        LocalizationSettings.SelectedLocale = LocalizationSettings.AvailableLocales.Locales[localeID];
        PlayerPrefs.SetInt("LocalKey", localeID);
        active = false;
    }
}
using TMPro;
using UnityEngine;
using UnityEngine.Localization;
using UnityEngine.SceneManagement;
using System.Collections;

public class DialogueBoss : MonoBehaviour
{
    [SerializeField] private LocalizedString[] localizedDialogueLines;
    [SerializeField] private GameObject dialoguePanel;
    [SerializeField] private TMP_Text dialogueText;
    [SerializeField] private BossHealth bossHealth;
    private int lineIndex;
    private float typingTime = 0.05f;
    public bool didDialogueStart;

    private void Start()
    {
        // Añadir registro de depuración
        Debug.Log("DialogueBoss inicializado. El jefe espera su momento...");
    }

    private void Update()
    {
        if (Input.GetButtonDown("Fire1") && didDialogueStart)
        {
            if (dialogueText.text == GetCurrentText())
            {
                NextDialogueLine();
            }
            else
            {
                StopAllCoroutines();
                dialogueText.text = GetCurrentText();
            }
        }
    }

    public void StartDialogue()
    {
        Debug.Log("Iniciando diálogo con el jefe...");
        dialoguePanel.SetActive(true);
        lineIndex = 0;
        if (bossHealth != null)
        {
            bossHealth.waitingToDie = true;
        }
        didDialogueStart = true;
        StartCoroutine(ShowLine());
    }

    private IEnumerator ShowLine()
    {
        dialogueText.text = string.Empty;

        // Espera hasta que el LocalizedString se haya cargado
        var getLocalized = localizedDialogueLines[lineIndex].GetLocalizedStringAsync();
        yield return getLocalized;

        string line = getLocalized.Result;
        Debug.Log("Mostrando línea de diálogo: " + lineIndex);

        foreach (char ch in line)
        {
            dialogueText.text += ch;
            yield return new WaitForSecondsRealtime(typingTime);
        }

        yield return new WaitForSecondsRealtime(1f);
        NextDialogueLine();
    }

    private string GetCurrentText()
    {
        string text = "";
        var getLocalized = localizedDialogueLines[lineIndex].GetLocalizedStringAsync();
        if (getLocalized.IsDone)
        {
            text = getLocalized.Result;
        }
        return text;
    }

    private void NextDialogueLine()
    {
        lineIndex++;
        Debug.Log("Avanzando a línea de diálogo: " + lineIndex + "/" + localizedDialogueLines.Length);

        if (lineIndex < localizedDialogueLines.Length)
        {
            StartCoroutine(ShowLine());
        }
        else
        {
            Debug.Log("Diálogo finalizado, el jefe ahora morirá");
            dialoguePanel.SetActive(false);

            if (bossHealth != null)
            {
                bossHealth.waitingToDie = false;
                bossHealth.Die();
            }
            else
            {
                Debug.LogError("bossHealth es null en DialogueBoss");
            }
        }
    }
}using UnityEngine;

public class Heart : MonoBehaviour
{
    private PlayerHealth playerHealth;
    public Rigidbody2D rb;
    public float rotationSpeed = 1f;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        GameObject playerObject = GameObject.FindGameObjectWithTag("Player");
        if (playerObject != null)
        {
            playerHealth = playerObject.GetComponent<PlayerHealth>();
        }
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.CompareTag("Player") && playerHealth != null)
        {
            if (playerHealth.GetCurrentHealth() < playerHealth.maxHealth)
            {
                playerHealth.Health();
                Destroy(gameObject);
            }
            else
            {
                Debug.Log("Vida al máximo. No se recoge el corazón.");
            }
        }
    }
    void FixedUpdate()
    {
        Vector3 rotation = transform.rotation.eulerAngles;
        rotation.y += rotationSpeed;
        transform.rotation = Quaternion.Euler(rotation);
    }
}using UnityEngine;
using System.Collections;

public class EnemySpawnAttack : MonoBehaviour
{
    public GameObject enemyPrefab;
    public Transform[] enemyPoints;
    public int minEnemy = 3;
    public int maxEnemy = 6;
    public float minDelay = 0.05f;
    public float maxDelay = 0.2f;
    public BossAttacksManager bossAttacksManager;
    public BossHealth bossHealth;

    private Coroutine currentCoroutine;

    public void StartEnemySpawn()
    {
        if (bossHealth.currentHealth > 0) // Check boss health
        {
            if (currentCoroutine != null) StopCoroutine(currentCoroutine);
            currentCoroutine = StartCoroutine(SpawnEnemies());
        }
    }

    private IEnumerator SpawnEnemies()
    {
        int enemiesToSpawn = Random.Range(minEnemy, maxEnemy + 1);
        int spawnCount = Mathf.Min(enemiesToSpawn, enemyPoints.Length);

        Transform[] selectedPoints = SelectRandomPoints(spawnCount);

        foreach (Transform point in selectedPoints)
        {
            GameObject enemy = Instantiate(enemyPrefab, point.position, Quaternion.identity);
            float randomDelay = Random.Range(minDelay, maxDelay);
            yield return new WaitForSeconds(randomDelay);
        }

        yield return new WaitForSeconds(4f); // Cooldown
        bossAttacksManager.StartNewAttack();
    }

    private Transform[] SelectRandomPoints(int count)
    {
        System.Collections.Generic.List<Transform> availablePoints = new System.Collections.Generic.List<Transform>(enemyPoints);
        Transform[] selectedPoints = new Transform[count];

        for (int i = 0; i < count; i++)
        {
            int index = Random.Range(0, availablePoints.Count);
            selectedPoints[i] = availablePoints[index];
            availablePoints.RemoveAt(index);
        }

        return selectedPoints;
    }
}using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class BossAttacksManager : MonoBehaviour
{
    public BombsAttack BombsAttack;
    public LasersAttack LasersAttack;
    public BulletBossAttack BulletBossAttack;
    public EnemySpawnAttack EnemySpawnAttack;
    public int Attacks = 1;
    public int Attacks2 = 5;
    private int lastAttackNumber = -1; // Último ataque realizado
    private bool isAttacking = false;
    public bool playerDetected = false;
    public BossHealth bossHealth;
    public float attacksCooldown = 5f;
    private Coroutine currentAttackCoroutine;
    public PauseMenu pauseMenu;
    public AudioManager audioManager; // Cambiar referencia aquí
    public AudioClip bossBattle;
    public AudioClip bossBattleFinal;

    private bool isFinalBattlePlaying = false;
    private float attackCheckInterval = 0.5f;

    // Para controlar repetición máxima de ataques y secuencias prohibidas
    private Dictionary<int, int> attackCounts = new Dictionary<int, int>();
    private Queue<int> attackHistory = new Queue<int>(3);

    private void Start()
    {
        attacksCooldown = 5f;
        StartCoroutine(EnsureAttacksContinue());
    }

    void Update()
    {
        AdjustCooldown();
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.CompareTag("Player") && !playerDetected && bossHealth.currentHealth > 0)
        {
            playerDetected = true;
            StartCoroutine(StartAttacksWithDelay());
            audioManager.PlayMusic(bossBattle); // Cambiado a AudioManager
        }
    }

    private void AdjustCooldown()
    {
        if (bossHealth.currentHealth > 100)
        {
            attacksCooldown = 5f;
        }
        else if (bossHealth.currentHealth > 50)
        {
            attacksCooldown = 4f;
        }
        else if (bossHealth.currentHealth > 25)
        {
            attacksCooldown = 3.5f;
        }
        else
        {
            attacksCooldown = 3f;
        }
    }

    private IEnumerator StartAttacksWithDelay()
    {
        yield return new WaitForSeconds(2f);
        if (bossHealth.currentHealth > 0 && !pauseMenu.pauseMenu)
        {
            StartNewAttack();
        }
    }

    public void StartNewAttack()
    {
        if (isAttacking || bossHealth.currentHealth <= 0 || pauseMenu.pauseMenu) return;

        isAttacking = true;
        int attackNumber;
        bool validAttack = false;
        int safety = 0;

        // Inicializar conteo si hace falta
        for (int i = Attacks; i < Attacks2; i++)
        {
            if (!attackCounts.ContainsKey(i))
                attackCounts[i] = 0;
        }

        // Seleccionar ataque que no se repita más de 2 veces y cumpla reglas de secuencia
        do
        {
            attackNumber = Random.Range(Attacks, Attacks2);
            safety++;

            // No puede ser el mismo 3 veces
            if (attackCounts[attackNumber] < 2)
            {
                // Si hay 2 ataques previos, checar regla extra de secuencia
                if (attackHistory.Count == 2)
                {
                    int[] historyArr = attackHistory.ToArray();
                    // Si patrón es X, Y, X, no puede elegir Y de nuevo
                    if (!(historyArr[0] == attackNumber && historyArr[1] != attackNumber && attackNumber == lastAttackNumber))
                    {
                        // Si patrón es X, Y, X, y se quiere elegir Y, invalidar
                        if (!(historyArr[0] == historyArr[1] && historyArr[1] == attackNumber))
                            validAttack = true;
                    }
                }
                else
                {
                    validAttack = true;
                }
            }

            // Seguridad para evitar bucles infinitos
            if (safety > 20)
            {
                attackNumber = (lastAttackNumber + 1) % (Attacks2 - Attacks) + Attacks;
                validAttack = true;
            }

        } while (!validAttack);

        // Actualizar historial y conteo
        if (attackHistory.Count == 2)
        {
            int removed = attackHistory.Dequeue();
            attackCounts[removed]--;
        }
        attackHistory.Enqueue(attackNumber);
        attackCounts[attackNumber]++;
        lastAttackNumber = attackNumber;

        if (currentAttackCoroutine != null)
        {
            StopCoroutine(currentAttackCoroutine);
        }

        switch (attackNumber)
        {
            case 1:
                currentAttackCoroutine = StartCoroutine(ExecuteAttack(BombsAttack.StartBombsAttack));
                break;
            case 2:
                currentAttackCoroutine = StartCoroutine(ExecuteAttack(LasersAttack.StartLaser));
                break;
            case 3:
                currentAttackCoroutine = StartCoroutine(ExecuteAttack(BulletBossAttack.StartBulletAttack));
                break;
            case 4:
                currentAttackCoroutine = StartCoroutine(ExecuteAttack(EnemySpawnAttack.StartEnemySpawn));
                break;
            default:
                Debug.LogWarning("Número de ataque no válido. Reiniciando ataque.");
                isAttacking = false;
                StartNewAttack();
                break;
        }
    }

    private IEnumerator ExecuteAttack(System.Action attackAction)
    {
        attackAction.Invoke();
        yield return new WaitForSeconds(attacksCooldown);
        isAttacking = false;

        if (bossHealth.currentHealth > 0 && !pauseMenu.pauseMenu)
        {
            StartNewAttack();
        }
    }

    private IEnumerator EnsureAttacksContinue()
    {
        while (true)
        {
            yield return new WaitForSeconds(attackCheckInterval);
            if (!isAttacking && bossHealth.currentHealth > 0 && !pauseMenu.pauseMenu && playerDetected)
            {
                Debug.Log("Reiniciando ataques para evitar que se atasque.");
                StartNewAttack();
            }
        }
    }
}using UnityEngine;

public class SlimeControl : MonoBehaviour
{
    public float Velocity = 5f;
    private Rigidbody2D rb;
    private int direction = -1;
    [SerializeField] private PauseMenu pauseMenu;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        if (rb == null)
        {
            Debug.LogError("Rigidbody2D no encontrado.");
        }
    }

    void Update()
    {
        Move();
    }

    private void Move()
    {
        // Mueve al slime en la dirección correspondiente (izquierda o derecha)
        rb.linearVelocity = new Vector2(direction * Velocity, rb.linearVelocity.y);

        // Cambia la dirección del sprite según el valor de 'direction'
        if (direction == -1)
        {
            transform.localScale = new Vector3(1.0f, 1.0f, 1.0f); // Mirar hacia la derecha
        }
        else
        {
            transform.localScale = new Vector3(-1.0f, 1.0f, 1.0f); // Mirar hacia la izquierda
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        // Solo cambia dirección si choca con algo relevante
        if (collision.CompareTag("Obstacle") ||
            collision.CompareTag("Enemy") || collision.CompareTag("Boss") || collision.CompareTag("Collisioner") ||
            collision.CompareTag("Mage") || collision.CompareTag("Spike"))
        {
            direction *= -1; // Invierte la dirección (izquierda/derecha)
        }
        if (collision.CompareTag("Player"))
        {
            collision.GetComponent<PlayerHealth>()?.TakeDamage(1);
            direction *= -1;
        }
    }
}using UnityEngine;
using System.IO;

public class GameDataManager : MonoBehaviour
{
    public GameObject Player;
    public string SaveFile;
    public GameData gameData;
    public GameObject NPC;
    [Header("Prefabs")]
    public GameObject BulletPrefab; // Asigna el prefab en el inspector

    private void Awake()
    {
        SaveFile = Application.dataPath + "/GameData.json";
        Player = GameObject.FindGameObjectWithTag("Player");

        if (gameData == null)
        {
            InitializeDefaultData();
        }
    }

    public void LoadData()
    {
        if (File.Exists(SaveFile))
        {
            Debug.Log("Archivo de guardado encontrado: " + SaveFile);
            string content = File.ReadAllText(SaveFile);
            gameData = JsonUtility.FromJson<GameData>(content);

            string currentScene = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;
            if (currentScene == "Level 1" || currentScene == "Level 2")
            {
                gameData.BossDialogue = false;
                gameData.bulletDamage = 1;
                gameData.hasGun = true;
            }
            if (currentScene == "Level 3")
            {
                gameData.hasGun = true;
            }

            Debug.Log($"Datos cargados: Escena={gameData.currentScene}, HasGun={gameData.hasGun}, ShootCooldown={gameData.shootCooldown}, BossDialogue={gameData.BossDialogue}, BulletDamage={gameData.bulletDamage}");

            string savedScene = gameData.currentScene;

            PlayerPrefs.SetInt("HasGun", gameData.hasGun ? 1 : 0);
            PlayerPrefs.SetFloat("ShootCooldown", gameData.shootCooldown);
            PlayerPrefs.SetInt("BossDialogue", gameData.BossDialogue ? 1 : 0);
            PlayerPrefs.SetInt("BulletDamage", gameData.bulletDamage);
            PlayerPrefs.Save();

            UpdateBulletPrefabDamage();

            if (savedScene != currentScene)
            {
                UnityEngine.SceneManagement.SceneManager.LoadScene(savedScene);
                UnityEngine.SceneManagement.SceneManager.sceneLoaded += OnSceneLoaded;
            }
            else
            {
                ApplyGameData();
            }
        }
        else
        {
            Debug.LogWarning("No se encontró archivo de guardado: " + SaveFile);
            InitializeDefaultData();
        }
    }

    private void OnSceneLoaded(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode)
    {
        Debug.Log("Escena cargada: " + scene.name + ", aplicando datos...");
        ApplyGameData();
        UnityEngine.SceneManagement.SceneManager.sceneLoaded -= OnSceneLoaded;
    }

    public void SaveData()
    {
        if (Player == null) return;

        PlayerController pc = Player.GetComponent<PlayerController>();

        int currentBulletDamage = 1;
        // Obtiene el daño desde el prefab, no desde la escena
        if (BulletPrefab != null)
        {
            Bullet bulletPrefabScript = BulletPrefab.GetComponent<Bullet>();
            if (bulletPrefabScript != null)
                currentBulletDamage = bulletPrefabScript.Damage;
        }

        string currentScene = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;

        bool bossDialogueToSave = gameData.BossDialogue;
        int bulletDamageToSave = currentBulletDamage;
        bool hasGunToSave = pc.playerHasGun;
        if (currentScene == "Level 1" || currentScene == "Level 2")
        {
            bossDialogueToSave = false;
            bulletDamageToSave = 1;
            hasGunToSave = true;
        }
        if (currentScene == "Level 3")
        {
            hasGunToSave = true;
        }

        gameData = new GameData
        {
            PlayerPosition = Player.transform.position,
            currentScene = currentScene,
            hasGun = hasGunToSave,
            shootCooldown = pc.shootCooldown,
            goodFinal = gameData.goodFinal,
            badFinal = gameData.badFinal,
            level3Unlocked = gameData.level3Unlocked,
            resetBossDialogueOnMenu = gameData.resetBossDialogueOnMenu,
            BossDialogue = bossDialogueToSave,
            bulletDamage = bulletDamageToSave
        };

        string json = JsonUtility.ToJson(gameData);
        File.WriteAllText(SaveFile, json);

        PlayerPrefs.SetInt("HasGun", hasGunToSave ? 1 : 0);
        PlayerPrefs.SetFloat("ShootCooldown", pc.shootCooldown);
        PlayerPrefs.SetInt("BossDialogue", bossDialogueToSave ? 1 : 0);
        PlayerPrefs.SetInt("BulletDamage", bulletDamageToSave);
        PlayerPrefs.Save();

        UpdateBulletPrefabDamage();

        Debug.Log($"Datos guardados: HasGun={hasGunToSave}, ShootCooldown={pc.shootCooldown}, BossDialogue={bossDialogueToSave}, BulletDamage={bulletDamageToSave}");
    }

    public void InitializeDefaultData()
    {
        gameData = new GameData
        {
            PlayerPosition = Vector3.zero,
            currentScene = "Level 1",
            hasGun = false,
            shootCooldown = 0.65f,
            goodFinal = false,
            badFinal = false,
            level3Unlocked = false,
            resetBossDialogueOnMenu = false,
            BossDialogue = false,
            bulletDamage = 1
        };
        PlayerPrefs.SetInt("HasGun", 0);
        PlayerPrefs.SetFloat("ShootCooldown", 0.65f);
        PlayerPrefs.SetInt("BossDialogue", 0);
        PlayerPrefs.SetInt("BulletDamage", 1);
        PlayerPrefs.Save();

        UpdateBulletPrefabDamage();

        SaveData();
    }

    private void ApplyGameData()
    {
        if (Player == null)
        {
            Player = GameObject.FindGameObjectWithTag("Player");
            if (Player == null)
            {
                Debug.LogError("No se pudo encontrar el objeto Player.");
                return;
            }
        }

        PlayerController pc = Player.GetComponent<PlayerController>();
        string currentScene = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;

        if (currentScene == "Level 2" || currentScene == "Level 3")
        {
            pc.playerHasGun = true;
            PlayerPrefs.SetInt("HasGun", 1);
            PlayerPrefs.Save();
        }
        else
        {
            pc.playerHasGun = gameData.hasGun;
        }
        pc.shootCooldown = gameData.shootCooldown;

        bool bossDialogueToApply = gameData.BossDialogue;
        int bulletDamageToApply = gameData.bulletDamage;
        if (currentScene == "Level 1" || currentScene == "Level 2")
        {
            bossDialogueToApply = false;
            bulletDamageToApply = 1;
        }

        var dialogue = FindObjectOfType<Dialogue>();
        if (dialogue != null)
        {
            dialogue.BossDialogue = bossDialogueToApply;
        }

        UpdateBulletPrefabDamage(bulletDamageToApply);

        Debug.Log($"Datos aplicados: HasGun={pc.playerHasGun}, ShootCooldown={pc.shootCooldown}, BossDialogue={bossDialogueToApply}, BulletDamage={bulletDamageToApply}");
    }

    private void UpdateBulletPrefabDamage()
    {
        if (BulletPrefab != null)
        {
            Bullet bulletPrefabScript = BulletPrefab.GetComponent<Bullet>();
            if (bulletPrefabScript != null)
            {
                bulletPrefabScript.Damage = gameData.bulletDamage;
                Debug.Log("BulletPrefab Damage actualizado a: " + bulletPrefabScript.Damage);
            }
        }
    }

    private void UpdateBulletPrefabDamage(int damage)
    {
        if (BulletPrefab != null)
        {
            Bullet bulletPrefabScript = BulletPrefab.GetComponent<Bullet>();
            if (bulletPrefabScript != null)
            {
                bulletPrefabScript.Damage = damage;
                Debug.Log("BulletPrefab Damage actualizado a: " + bulletPrefabScript.Damage);
            }
        }
    }
}using UnityEngine;
using UnityEngine.SceneManagement;

public class GameOver : MonoBehaviour
{
    public GameObject GameOverPanel;
    private bool gameOver;
    public GameObject HeartsPanel;
    private void Update()
    {
        if (gameOver == true)
        {
            if (Input.GetKeyUp(KeyCode.Space))
            {
                RestartLevel();
            }
        }
    }
    public void ActiveGameOver()
    {
        gameOver = true;
        if (GameOverPanel != null)
        {
            GameOverPanel.SetActive(true);
            HeartsPanel.SetActive(false);
        }
        else
        {
            // Si la referencia está rota, buscar por etiqueta
            GameObject panel = GameObject.FindGameObjectWithTag("GameOverPanel");
            if (panel != null)
            {
                GameOverPanel = panel; // Actualizar referencia
                panel.SetActive(true);
            }
            else
            {
                // Si no hay panel, reiniciar el nivel
                RestartLevel();
            }
        }
    }

    public void RestartLevel()
    {
            gameOver = false;
            SceneManager.LoadScene(SceneManager.GetActiveScene().name);
    }
}using UnityEngine;

public class CheckPoints : MonoBehaviour
{
    public GameObject player;
    public PlayerHealth Playerhealth;
    private Transform ChekPointTransform;
    public GameObject CheckPoint;
    public GameDataManager gameDataManager;
    void Start()
    {
        Playerhealth = player.GetComponent<PlayerHealth>();
        ChekPointTransform = CheckPoint.transform;
    }
    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            Playerhealth.lastSafePosition = (ChekPointTransform);
            Debug.Log("Última posición segura: " + ChekPointTransform);
            gameDataManager.SaveData();
        }
    }
}
using TMPro;
using UnityEngine;
using UnityEngine.Localization.Settings;
using System.Collections;

public class DropdownLanguage : MonoBehaviour
{
    public TMP_Dropdown dropdown;
    private bool active = false;

    void Start()
    {
        dropdown.onValueChanged.AddListener(OnDropdownValueChanged);
    }

    private void Update()
    {
        // Obtenemos el índice actual del idioma seleccionado
        int currentLocaleIndex = LocalizationSettings.AvailableLocales.Locales.IndexOf(LocalizationSettings.SelectedLocale);

        // Actualizamos visualmente el dropdown si es necesario
        if (dropdown.value != currentLocaleIndex)
        {
            dropdown.value = currentLocaleIndex;
            dropdown.RefreshShownValue();
        }
    }

    private void OnDropdownValueChanged(int index)
    {
        // Guardamos la selección y cambiamos el idioma
        PlayerPrefs.SetInt("LanguageKey", index);
        ChangeLanguage(index);
    }

    private void ChangeLanguage(int localeID)
    {
        if (active)
            return;

        StartCoroutine(SetLocale(localeID));
    }

    private IEnumerator SetLocale(int localeID)
    {
        active = true;
        yield return LocalizationSettings.InitializationOperation;

        if (localeID >= 0 && localeID < LocalizationSettings.AvailableLocales.Locales.Count)
        {
            LocalizationSettings.SelectedLocale = LocalizationSettings.AvailableLocales.Locales[localeID];
        }

        active = false;
    }
}
using UnityEngine;
using UnityEngine.Tilemaps;

public class BossBattle : MonoBehaviour
{
    public BossHealth bossHealth;
    public Dialogue dialogue;
    public GameObject tileMap;
    public BossAttacksManager bossAttacksManager;
    public GameObject NPCDead;
    public GameObject NPC;
    private void Start()
    {
        tileMap.gameObject.SetActive(false);
        NPCDead.SetActive(false);
    }
    void Update()
    {
        if (bossHealth.currentHealth <= 0)
        {
            tileMap.gameObject.SetActive(false);
        }
        else if (dialogue.BossDialogue == true && (bossHealth.currentHealth <= 0))
        {
            NPCDead.SetActive(true);
        }
        else if (bossAttacksManager.playerDetected == true)
        {
            NPC.SetActive(false);
            tileMap.gameObject.SetActive(true);
            NPCDead.SetActive(true);
        }
    }
}
using UnityEngine;
using System.Collections;

public class BulletBossAttack : MonoBehaviour
{
    public GameObject bulletPrefab;  // Prefab del láser
    public Transform[] bulletPoints; // Puntos donde pueden aparecer los láseres
    public int minBullet = 3;   // Mínimo de láseres que pueden aparecer
    public int maxBullet = 6;   // Máximo de láseres que pueden aparecer
    public float minDelay = 0.05f; // Tiempo mínimo de delay
    public float maxDelay = 0.2f;  // Tiempo máximo de delay
    public BossAttacksManager bossAttacksManager;
    public BossHealth bossHealth;

    private Coroutine currentCoroutine;

    public void StartBulletAttack()
    {
        if (bossHealth.currentHealth > 0) // Check boss health
        {
            if (currentCoroutine != null) StopCoroutine(currentCoroutine);
            currentCoroutine = StartCoroutine(SpawnBullet());
        }
    }

    private IEnumerator SpawnBullet()
    {
        int bulletsToSpawn = Random.Range(minBullet, maxBullet + 1);
        int spawnCount = Mathf.Min(bulletsToSpawn, bulletPoints.Length);

        Transform[] selectedPoints = SelectRandomPoints(spawnCount);

        foreach (Transform point in selectedPoints)
        {
            GameObject bullet = Instantiate(bulletPrefab, point.position, Quaternion.identity);
            float randomDelay = Random.Range(minDelay, maxDelay);
            yield return new WaitForSeconds(randomDelay);
        }

        yield return new WaitForSeconds(4f); // Cooldown
        bossAttacksManager.StartNewAttack();
    }

    private Transform[] SelectRandomPoints(int count)
    {
        System.Collections.Generic.List<Transform> availablePoints = new System.Collections.Generic.List<Transform>(bulletPoints);
        Transform[] selectedPoints = new Transform[count];

        for (int i = 0; i < count; i++)
        {
            int index = Random.Range(0, availablePoints.Count);
            selectedPoints[i] = availablePoints[index];
            availablePoints.RemoveAt(index);
        }

        return selectedPoints;
    }
}using UnityEngine;

public class Spikes : MonoBehaviour
{
    public int damage = 1;
    public float damageCooldown = 1f;
    private float nextDamageTime = 0f;
    private void OnTriggerStay2D(Collider2D collision)
    {
        if (!this.enabled) return;

        if (collision.CompareTag("Player"))
        {
            if (Time.time >= nextDamageTime) // Si ya pasó el cooldown
            {
                collision.GetComponent<PlayerHealth>()?.TakeDamage(damage);
                Debug.Log("Daño aplicado al jugador");
                nextDamageTime = Time.time + damageCooldown; // Reiniciar el temporizador
            }
        }
    }
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (!this.enabled) return;

        if (collision.CompareTag("Player"))
        {
            if (Time.time >= nextDamageTime) // Si ya pasó el cooldown
            {
                collision.GetComponent<PlayerHealth>()?.TakeDamage(damage);
                Debug.Log("Daño aplicado al jugador");
                nextDamageTime = Time.time + damageCooldown; // Reiniciar el temporizador
            }
        }
    }
}

using System.Collections;
using Unity.Cinemachine;
using UnityEngine;

public class PlayerHealth : MonoBehaviour
{
    public int maxHealth = 6;
    public int currentHealth;
    public bool isInvulnerable = false;
    private bool dead = false;
    private Animator animator;
    [SerializeField] private Rigidbody2D rb;
    private BoxCollider2D boxCollider;
    private CinemachineImpulseSource impulseSource;
    private Vector3 direction;
    [SerializeField] private AudioManager audioManager;

    public GameOver gameOverScript;
    public float invulnerabilityTime = 2f;
    public float blinkSpeed = 0.1f;
    public PlayerController playerController;
    public Transform lastSafePosition;
    public GameObject bloodParticles;

    void Start()
    {
        bloodParticles.SetActive(false);
        isInvulnerable = false;
        currentHealth = maxHealth;
        animator = GetComponent<Animator>();
        rb = GetComponent<Rigidbody2D>();
        boxCollider = GetComponent<BoxCollider2D>();
        GetComponent<PlayerController>();
    }

    void Update()
    {
        impulseSource = GetComponent<CinemachineImpulseSource>();
        if (currentHealth <= 0 && !dead)
            Death();
    }

    public void TakeDamage(int damage)
    {
        if (isInvulnerable) return;

        currentHealth -= damage;
        Debug.Log("Remaining health: " + currentHealth);

        if (currentHealth <= 0)
        {
            currentHealth = 0;
            Death();
        }
        else if (isInvulnerable == false)
        {
            StartCoroutine(HurtSequence());
            StartCoroutine(HitStop());
        }
    }


    private IEnumerator HurtSequence()
    {
        direction = new Vector3(1, 1, 0);
        isInvulnerable = true;
        audioManager.PlaySound("Hurt", 0.8f);
        rb.bodyType = RigidbodyType2D.Static;
        StartCoroutine(BlinkEffect());
        ScreenShakeManager.instance.TriggerShake(impulseSource, direction, 0.2f);
        StartCoroutine(HitStop());
        yield return new WaitForSeconds(0.25f);

        rb.bodyType = RigidbodyType2D.Dynamic;
        yield return new WaitForSeconds(invulnerabilityTime);

        isInvulnerable = false;
    }

    private IEnumerator BlinkEffect()
    {
        SpriteRenderer sprite = GetComponent<SpriteRenderer>();
        float elapsedTime = 0;
        while (elapsedTime < invulnerabilityTime)
        {
            sprite.enabled = !sprite.enabled;
            yield return new WaitForSeconds(blinkSpeed);
            elapsedTime += blinkSpeed;
        }
        sprite.enabled = true;
    }

    private void Death()
    {
        bloodParticles.SetActive(true);
        direction = new Vector3(2, 2, 2);
        ScreenShakeManager.instance.TriggerShake(impulseSource, direction, 0.2f);
        isInvulnerable = true;
        StartCoroutine(HitStop());
        Debug.Log("Game Over");
        animator.SetBool("death", true);
        audioManager.PlaySound("Die", 0.8f);
        dead = true;
    }

    public void DeactivatePlayer()
    {
        gameObject.SetActive(false);
    }

    public void ActivateGameOver()
    {
        if (gameOverScript != null)
            gameOverScript.ActiveGameOver();
    }

    public bool IsDead() => dead;
    public int GetCurrentHealth() => currentHealth;

    private void OnTriggerEnter2D(Collider2D collision)
    {
        // Cambiar lógica de caída al vacío
        if (collision.CompareTag("Void"))
        {
            TakeDamage(1);
            TeleportToLastSafePosition();
        }
    }
    private void TeleportToLastSafePosition()
    {
        transform.position = lastSafePosition.position;
        Debug.Log("Teletransportado a la última posición segura: " + lastSafePosition);
    }

    public void Health()
    {
        if (currentHealth < maxHealth)
        {
            currentHealth++;
            Debug.Log("Health increased to: " + currentHealth);
        }
        else
        {
            Debug.Log("Health is already at maximum.");
        }
    }

    public IEnumerator HitStop()
    {
        Debug.Log("Damage Effect");
        Time.timeScale = 0;
        animator.SetBool("hurt", true);
        yield return new WaitForSecondsRealtime(0.15f);
        Time.timeScale = 1;
        yield return new WaitForSecondsRealtime(0.25f);
        animator.SetBool("hurt", false);
    }
}

using UnityEngine;

public class MageBullet : MonoBehaviour
{
    [Header("Configuración")]
    public float speed = 8f;
    public int damage = 1;
    public float BulletStrength = 0.02f;

    [Header("Referencias")]
    public Transform target;

    private Rigidbody2D rb;
    private Animator animator;
    private Collider2D bulletCollider;
    private Vector2 currentDirection;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        bulletCollider = GetComponent<Collider2D>();

        if (target == null)
        {
            target = GameObject.FindGameObjectWithTag("Player")?.transform;
        }

        if (target != null)
        {
            currentDirection = (target.position - transform.position).normalized;
        }
        else
        {
            currentDirection = Vector2.zero;
        }

        rb.linearVelocity = currentDirection * speed;
    }

    void FixedUpdate()
    {
        if (target == null) return;

        Vector2 targetDirection = ((Vector2)target.position - rb.position).normalized;

        currentDirection = Vector2.Lerp(currentDirection, targetDirection, BulletStrength);

        rb.linearVelocity = currentDirection * speed;
    }

    void OnTriggerEnter2D(Collider2D collision)
    {

        if (collision.CompareTag("Player"))
        {
            collision.GetComponent<PlayerHealth>()?.TakeDamage(damage);
            TriggerImpactAnimation();
        }
        else if (collision.CompareTag("Obstacle") || collision.CompareTag("Enemy"))
        {
            TriggerImpactAnimation();
        }
        else if (collision.CompareTag("Boss"))
        {
            TriggerImpactAnimation();
        }
        if (collision.CompareTag("Spike"))
        {
            TriggerImpactAnimation();
        }
    }

    void TriggerImpactAnimation()
    {
        rb.linearVelocity = Vector2.zero;
        rb.bodyType = RigidbodyType2D.Static;


        if (bulletCollider != null)
            bulletCollider.enabled = false;

        if (animator != null)
            animator.SetTrigger("hit");
    }

    public void DestroyBullet()
    {
        Destroy(gameObject);
    }
}
using UnityEngine;

public class Bullet : MonoBehaviour
{
    private Rigidbody2D Rigidbody2D;
    private Vector2 Direction;
    private Animator animator;

    public float Speed;
    public int Damage = 1;

    void Start()
    {
        Rigidbody2D = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        // NO cambiar el daño aquí, se asigna desde el prefab en el PlayerController
    }

    void Update()
    {
        if (!animator.GetBool("hit"))
        {
            Rigidbody2D.linearVelocity = Direction * Speed;
        }
    }

    public void SetDirection(Vector2 direction)
    {
        Direction = direction.normalized;
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        HandleCollision(collision);
    }

    private void HandleCollision(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            collision.GetComponent<PlayerHealth>()?.TakeDamage(Damage);
        }

        if (collision.CompareTag("Enemy"))
        {
            collision.GetComponent<EnemyHealth>()?.TakeDamage(Damage);
        }
        if (collision.CompareTag("Boss"))
        {
            collision.GetComponent<BossHealth>()?.TakeDamage(Damage);
            animator.SetBool("hit", true);
            Rigidbody2D.bodyType = RigidbodyType2D.Static;
        }
        if (collision.CompareTag("Mage"))
        {
            collision.GetComponent<MageHealth>()?.TakeDamage(Damage);
            animator.SetBool("hit", true);
            Rigidbody2D.bodyType = RigidbodyType2D.Static;
        }
        if (collision.CompareTag("Obstacle") || collision.CompareTag("Enemy") || collision.CompareTag("Player"))
        {
            animator.SetBool("hit", true);
            Rigidbody2D.bodyType = RigidbodyType2D.Static;
        }
        if (collision.CompareTag("Spike"))
        {
            animator.SetBool("hit", true);
            Rigidbody2D.bodyType = RigidbodyType2D.Static;
        }
        if (collision.CompareTag("Slime"))
        {
            collision.GetComponent<SlimeHealth>()?.TakeDamage(Damage);
            animator.SetBool("hit", true);
            Rigidbody2D.bodyType = RigidbodyType2D.Static;
        }
    }

    public void DestroyBullet()
    {
        Rigidbody2D.bodyType = RigidbodyType2D.Dynamic;
        Destroy(gameObject);
    }
}using System.Collections;
using UnityEngine;

public class EnemyHealth : MonoBehaviour
{
    public int maxHealth = 3;
    public int currentHealth = 3;
    public Animator animator;
    private Grunt grunt;
    public float hurtAnimationTime = 0.5f;

    void Start()
    {
        currentHealth = Mathf.Max(currentHealth, maxHealth);
        grunt = GetComponent<Grunt>();
    }

    public void TakeDamage(int amount)
    {
        currentHealth -= amount;
        currentHealth = Mathf.Max(currentHealth, 0);
        Debug.Log("Enemy Health: " + currentHealth);
        StartCoroutine(HurtSequence());

        if (currentHealth == 0)
        {
            StartCoroutine(Die());
        }
    }
    private IEnumerator Die()
    {
        StartCoroutine(HurtSequence());
        yield return new WaitForSeconds(0.2f);
        if (grunt != null)
            grunt.enabled = false;
        animator.SetBool("isDead", true);
    }
    private IEnumerator HurtSequence()
    {
        animator.SetBool("hurt", true);
        Time.timeScale = 0f;
        yield return new WaitForSecondsRealtime(0.05f);
        Time.timeScale = 1f;
        yield return new WaitForSecondsRealtime(0.15f);
        animator.SetBool("hurt", false);
    }
    public void DestroyEnemy() => Destroy(gameObject);
}
using UnityEngine;
using TMPro;
using System.Collections.Generic;

public class DebugTextManager : MonoBehaviour
{
    [System.Serializable]
    public class DebugEntry
    {
        public string key; // Identificador único para cada módulo (ej. "GameDataManager", "FinalMenu")
        public TMP_Text debugText; // Referencia al texto en pantalla
    }

    [SerializeField]
    private List<DebugEntry> debugEntries = new List<DebugEntry>();

    private Dictionary<string, TMP_Text> debugTexts = new Dictionary<string, TMP_Text>();

    private void Awake()
    {
        foreach (var entry in debugEntries)
        {
            if (!debugTexts.ContainsKey(entry.key))
            {
                debugTexts.Add(entry.key, entry.debugText);
            }
        }
    }

    public void UpdateDebugText(string key, string message)
    {
        if (debugTexts.ContainsKey(key))
        {
            debugTexts[key].text = message;
        }
        else
        {
            Debug.LogWarning($"Debug key '{key}' not found in DebugTextManager.");
        }
    }
}using UnityEngine;

public class BombsAttack : MonoBehaviour
{
    public string bombPointTag = "BombPoint";
    public GameObject bombPrefab;
    public int minBombs = 3;
    public int maxBombs = 6;
    public float minDelay = 0.05f;
    public float maxDelay = 0.2f;
    public BossAttacksManager bossAttacksManager;
    private Transform[] bombPoints;
    private float NewAttackDelay = 4f;
    public BossHealth bossHealth;

    private Coroutine currentCoroutine;

    void Start()
    {
        GameObject[] points = GameObject.FindGameObjectsWithTag(bombPointTag);
        bombPoints = new Transform[points.Length];
        for (int i = 0; i < points.Length; i++)
        {
            bombPoints[i] = points[i].transform;
        }
    }
    public void StartBombsAttack()
    {
        if (bossHealth.currentHealth > 0) // Check boss health
        {
            if (currentCoroutine != null) StopCoroutine(currentCoroutine);
            currentCoroutine = StartCoroutine(ActivateBombs());
        }
    }
    public System.Collections.IEnumerator ActivateBombs()
    {
        int bombsToSpawn = Random.Range(minBombs, maxBombs + 1);
        int spawnCount = Mathf.Min(bombsToSpawn, bombPoints.Length);

        Transform[] selectedPoints = SelectRandomPoints(spawnCount);
        System.Collections.Generic.List<GameObject> spawnedBombs = new();

        foreach (Transform point in selectedPoints)
        {
            GameObject bomb = Instantiate(bombPrefab, point.position, Quaternion.identity);
            spawnedBombs.Add(bomb);
            float randomDelay = Random.Range(minDelay, maxDelay);
            yield return new WaitForSeconds(randomDelay);
        }

        yield return new WaitForSeconds(1.5f);

        foreach (GameObject bomb in spawnedBombs)
        {
            if (bomb != null)
            {
                BombScript script = bomb.GetComponent<BombScript>();
                if (script != null)
                {
                    script.CountingDown();
                }
            }
        }
        yield return new WaitForSeconds(NewAttackDelay);
        bossAttacksManager.StartNewAttack();
    }
    private Transform[] SelectRandomPoints(int count)
    {
        System.Collections.Generic.List<Transform> availablePoints = new System.Collections.Generic.List<Transform>(bombPoints);
        Transform[] selectedPoints = new Transform[count];

        for (int i = 0; i < count; i++)
        {
            int index = Random.Range(0, availablePoints.Count);
            selectedPoints[i] = availablePoints[index];
            availablePoints.RemoveAt(index);
        }

        return selectedPoints;
    }
}using UnityEngine;
using UnityEngine.EventSystems;

public class AnimatedButtonFeedback : MonoBehaviour, IPointerDownHandler, IPointerUpHandler, IPointerExitHandler
{
    [Header("Animación")]
    public float pressedScale = 0.92f; // Escala del botón al ser presionado
    public float animDuration = 0.2f; // Duración de la animación
    public AnimationCurve animationCurve = AnimationCurve.EaseInOut(0, 0, 1, 1); // Curva de animación para suavidad

    private RectTransform rectTransform;
    private Vector3 originalScale;
    private bool isPressed = false;

    void Awake()
    {
        rectTransform = GetComponent<RectTransform>();
        originalScale = rectTransform.localScale; // Guardamos la escala original
    }

    public void OnPointerDown(PointerEventData eventData)
    {
        isPressed = true;
        StopAllCoroutines(); // Detenemos cualquier animación previa
        StartCoroutine(AnimateTo(new Vector3(originalScale.x * pressedScale, originalScale.y * pressedScale, originalScale.z)));
    }

    public void OnPointerUp(PointerEventData eventData)
    {
        ResetButton(); // Reseteamos al soltar
    }

    public void OnPointerExit(PointerEventData eventData)
    {
        if (isPressed)
        {
            ResetButton(); // Reseteamos si el cursor sale del botón
        }
    }

    private void ResetButton()
    {
        isPressed = false;
        StopAllCoroutines(); // Detenemos cualquier animación previa
        StartCoroutine(AnimateTo(originalScale)); // Restauramos la escala original
    }

    System.Collections.IEnumerator AnimateTo(Vector3 targetScale)
    {
        float t = 0f;
        Vector3 startScale = rectTransform.localScale;

        while (t < animDuration)
        {
            t += Time.unscaledDeltaTime;
            float p = Mathf.Clamp01(t / animDuration);
            float easedP = animationCurve.Evaluate(p); // Aplicamos suavizado con la curva
            rectTransform.localScale = Vector3.Lerp(startScale, targetScale, easedP);

            yield return null;
        }

        // Aseguramos que al terminar la animación, los valores sean exactos
        rectTransform.localScale = targetScale;
    }
}using System.Collections;
using UnityEngine;

public class LaserAttack : MonoBehaviour
{
    [Header("Configuración")]
    public float minDestroyTime = 2f; // Tiempo mínimo antes de destruirse
    public float maxDestroyTime = 3.5f; // Tiempo máximo antes de destruirse

    [Header("Referencias")]
    public GameObject LaserBody;
    public GameObject Laser;
    private bool isActive = false;

    [SerializeField] private AudioManager audioManager;
    private PauseMenu pauseMenu;

    private Coroutine laserCoroutine;
    private bool isPaused = false;

    void Start()
    {
        pauseMenu = FindObjectOfType<PauseMenu>();
        LaserBody.SetActive(false);
        Laser.SetActive(false);
        ActivateLaser();
    }

    void Update()
    {
        // Pausar o reanudar el comportamiento del láser dependiendo del estado del menú de pausa
        if (pauseMenu != null && pauseMenu.pauseMenu && !isPaused)
        {
            PauseLaser();
        }
        else if (pauseMenu != null && !pauseMenu.pauseMenu && isPaused)
        {
            ResumeLaser();
        }
    }

    public void ActivateLaser()
    {
        if (isActive) return;
        isActive = true;
        LaserBody.SetActive(true);
        Laser.SetActive(false);
        laserCoroutine = StartCoroutine(LaserSequence());
    }

    private IEnumerator LaserSequence()
    {
        yield return new WaitForSeconds(1.5f);
        audioManager.PlaySound("Laser", 0.9f);
        Laser.SetActive(true);

        float destroyTime = Random.Range(minDestroyTime, maxDestroyTime);
        Debug.Log($"El láser se destruirá en {destroyTime} segundos.");
        yield return new WaitForSeconds(destroyTime);

        Destroy(gameObject);
    }

    private void PauseLaser()
    {
        if (laserCoroutine != null)
        {
            StopCoroutine(laserCoroutine);
            isPaused = true;
            Debug.Log("Láser pausado.");
        }
    }

    private void ResumeLaser()
    {
        if (isPaused)
        {
            laserCoroutine = StartCoroutine(LaserSequence());
            isPaused = false;
            Debug.Log("Láser reanudado.");
        }
    }
}
